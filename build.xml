<?xml version="1.0"?>
<!-- ====================================================================== 
     March 2005                                                    

     Greenstone3 build and install script
                  
     kjdon                                                                
     ====================================================================== -->
<project name="greenstone3" default="usage" basedir=".">
  <echo>os.name: ${os.name}</echo>

  <!-- ============ classpath =================== -->
  <path id="project.classpath">
    <fileset dir="lib/java">
      <include name="**/*.jar"/>
    </fileset>
  </path>
  
  <!-- ============ self defined tasks =================== -->
  <taskdef name="mysetproxy" classname="org.greenstone.anttasks.MySetProxy" classpathref="project.classpath"/>
  <taskdef name="getuserandpassword" classname="org.greenstone.anttasks.MyGetUserAndPassword" classpathref="project.classpath"/>
  <taskdef name="rsr" classname="org.greenstone.anttasks.RegexSearchReplace" classpathref="project.classpath"/>
  <!--<taskdef name="svn" classname="org.tigris.subversion.svnant.SvnTask" classpathref="project.classpath"/>-->
  <taskdef name="if" classname="ise.antelope.tasks.IfTask" classpathref="project.classpath"/>
  <taskdef name="for" classname="net.sf.antcontrib.logic.ForTask" classpathref="project.classpath"/>
  <taskdef name="stringutil" classname="ise.antelope.tasks.StringUtilTask" classpathref="project.classpath"/>

 
  <!-- ===================== Property Definitions =========================== -->
  
  <!--

  Each of the following properties are used in the build script.
  Values for these properties are set by the first place they are
  defined, from the following list:

  * Definitions on the "ant" command line (ant -Dfoo=bar compile).

  * Definitions from a "build.properties" file in the top level
  source directory of this application.

  * Definitions from a "build.properties" file in the user's
  home directory.

  * Default definitions in this build.xml file.

  You will note below that property values can be composed based on the
  contents of previously defined properties.  This is a powerful technique
  that helps you minimize the number of changes required when your development
  environment is modified.  Note that property composition is allowed within
  "build.properties" files as well as in the "build.xml" script.

  -->

  <property name="os.linux" value="Linux"/> 
  <property name="os.mac" value="Mac OS X"/>
  <property name="os.solaris" value="SunOS"/>
  <property name="os.unix" value="${os.linux},${os.mac},${os.solaris}"/>
  <property name="os.windows" value="Windows 95,Windows 98,Windows 2000,Windows 2003,Windows XP,Windows NT,Windows ME,Windows Vista,Windows 7,Windows Server 2008,Windows Server 2008 R2"/> <!-- check this!!!-->

  <!-- this is true for linux and macs -->
  <condition property="current.os.isunix">
    <os family="unix"/>
  </condition>
  
  <condition property="current.os.isunixnotmac">
    <and>
      <os family="unix"/>
      <not>
	<os family="mac"/>
      </not>
    </and>
  </condition>
  
  <condition property="current.os.ismac">
    <os family="mac"/>
  </condition>
  
  <condition property="current.os.iswindows">
    <os family="windows"/>
  </condition>

  <!-- create build.properties if it has not been created yet -->
  <if>
    <bool><not><available file="build.properties"/></not></bool>
    <copy file="build.properties.in" tofile="build.properties"/>
  </if>

  <!-- create the packages dir if it has not been created yet -->
  <mkdir dir="packages"/>
  
  <!--the first three properties have to be put on the top to be used by build.properties-->
  <property name="gs2build.home" value="${basedir}${file.separator}gs2build"/>
  <property name="src.packages.home" value="${basedir}/src/packages"/>
  <property name="flax.svn.root" value="http://svn.greenstone.org/flax"/>

  <property name="solr-ext.home" value="${basedir}/ext/solr"/>

  <property file="build.properties"/>
  <if><bool><available file="${user.home}/build.properties"/></bool>
    <property file="${user.home}/build.properties"/>
  </if>

  <!-- now we've read in properties, apply defaults -->
  <property name="disable.collection.building" value="false"/>

  <!-- get properties from the environment -->
  <property environment="env"/>

  <!-- get the filesets defining components and executables -->
  <import file="resources/xml/components.xml"/>
  <import file="resources/xml/executables.xml"/>
    
  <!-- version properties for external packages -->
  <!-- for Java versions < 1.4, we print out the message that Java is too old.
	For Java 1.4, we use Tomcat 5.5, for Java5 and higher, we use Tomcat 7.0-->
  <condition property="tomcat.version" value="apache-tomcat-5.5.25" else="apache-tomcat-7.0.57"> 
    <equals arg1="1.4" arg2="${ant.java.version}"/>
  </condition>
  <condition property="tomcat.version.major" value="5" else="7"> 
    <equals arg1="1.4" arg2="${ant.java.version}"/>
  </condition>
  <condition property="privileged.attribute" value="privileged='true'" else=""> 
    <equals arg1="7" arg2="${tomcat.version.major}"/>
  </condition>

  <!-- external access to the GS3 pages or not 
       https://tomcat.apache.org/tomcat-7.0-doc/config/valve.html -->
  <condition property="allowed.IPs" 
	     value=".*" 
	     else="(127\.0\.0\.1|::1|0:0:0:0:0:0:0:1)"> 
    <matches pattern="^(1|true|yes)$" string="${server.external.access}"/>
  </condition>

  <property name="axis.zip.version" value="axis-bin-1_4.zip"/>
  <property name="axis.dir.version" value="axis-1_4"/>
  <property name="sqlite.targz.version" value="sqlite-autoconf-3070602.tar.gz"/>

  <property name="build.home" value="${basedir}/build"/>
  <property name="src.home" value="${basedir}/src/java"/>

  <if><bool><istrue value="${gsdl3home.isreadonly}"/></bool>
    <property name="readonly-packages.home" value="${basedir}/packages"/>
    <property name="packages.home" value="${gsdl3.writablehome}/packages"/>
    <!-- 
	 To run solr from a read-only location (like a DVD-ROM), its locktype needs to be "single",
	 else solr tries to write out a lock file to the collection's index folder which is read-only.

	 https://cwiki.apache.org/confluence/display/solr/IndexConfig+in+SolrConfig
	 says that the "single" locktype is "for special situations of a read-only index directory, or ...."
	 
	 See also http://wiki.apache.org/lucene-java/AvailableLockFactories
	 And look for the documentation on "locktype" in solr collection's etc/conf/solrconfig.xml
	 for further information on the different locktypes.

	 To set the locktype property from the commandline (it's a property to the server web), pass in 
	 "-Dsolr.lock.type=..." to the web server, as explained in
	 http://lucene.472066.n3.nabble.com/Where-can-we-set-the-parameters-in-Solr-Config-td4183706.html
      -->
    <property name="readonly.catalina.opts" value="-Dsolr.lock.type=single"/>
  <else>
    <property name="packages.home" value="${basedir}/packages"/>
    <property name="readonly.catalina.opts" value=""/>
  </else>
  </if>

  <!-- this may be set in build.properties, e.g. if you move the web dir to 
       tomcats webapps directory -->
  <property name="web.home" value="${basedir}/web"/>
  <property name="web.writablehome" value="${gsdl3.writablehome}"/>
  <!-- If using a dispersed GS3 web folder, then the user web would not contain everything in the
       default GS3 web (it won't contain a CGI or lib folder inside WEB-INF, for instance) -->
  <if>
    <bool><available file="${web.home}/WEB-INF/cgi" type="dir"/></bool>
    <property name="full.web.dir" value="${web.home}"/>
	<else>
		<property name="full.web.dir" value="${basedir}/web"/>
	</else>
  </if>  
  
  <!-- jar files needed by applets go here -->
  <property name="web.applet" value="${web.home}/applet"/>
  
  <!-- jar files needed by the servlet (and extra ones) go here -->
  <property name="web.lib" value="${web.home}/WEB-INF/lib"/>
  <property name="web.writablelib" value="${web.writablehome}/WEB-INF/lib"/>
  <!-- other files needed by the servlet go here -->
  <property name="web.classes" value="${web.home}/WEB-INF/classes"/>
  <property name="web.writableclasses" value="${web.writablehome}/WEB-INF/classes"/>

  <if>
    <bool><istrue value="${gsdl3home.isreadonly}"/></bool>
    <echo>Greenstone3 home directory is read-only</echo>
    <echo>  => Writable area is: ${gsdl3.writablehome}</echo>

    <condition property="gsdl3.writablehome.already-exists">
      <available file="${gsdl3.writablehome}" type="dir"/>
    </condition>

    <if>
      <bool><not><istrue value="${gsdl3.writablehome.already-exists}"/></not></bool>

      <!-- set up writable area -->
      <echo>No previous Greenstone home writable area detected</echo>
      <echo>  => Setting up area</echo>
      <mkdir dir="${gsdl3.writablehome}"/>
      <mkdir dir="${gsdl3.writablehome}/packages"/> 
      <mkdir dir="${gsdl3.writablehome}/logs"/>
      <mkdir dir="${gsdl3.writablehome}/ext/solr"/>

      <chmod perm="a+rwx" dir="${gsdl3.writablehome}"/>
      <chmod perm="a+rwx" dir="${gsdl3.writablehome}/packages"/>
      <chmod perm="a+rwx" dir="${gsdl3.writablehome}/logs"/> 
      <chmod perm="a+rwx" dir="${gsdl3.writablehome}/ext/solr"/> 

      <!-- copy over packages tomcat folder -->

      <if>
	<bool><istrue value="${current.os.iswindows}"/></bool>
	<copy todir="${gsdl3.writablehome}/packages/tomcat" 
	      preservelastmodified="true"
	      failonerror="true" >  
	  <fileset dir="${readonly-packages.home}/tomcat" includes="**"/>  
	</copy>
      
	<else>
	  <!-- else assume Unix -->
	  <!-- Can't go through the OS-independent <copy> task as it fails to preserve exec permissions -->
	  <echo>Copying to ${gsdl3.writablehome}/packages/tomcat</echo>
	  <exec executable="cp" output="/dev/null" spawn="false">
            <arg value="-r"/>
            <arg value="${readonly-packages.home}/tomcat"/>
            <arg value="${gsdl3.writablehome}/packages/."/>
	  </exec>

	  <!-- the packages folder in tmp only has read permissions at this stage, it needs more permissions to work when running GS3 off a disc -->
	  <chmod perm="a+rwx" file="${gsdl3.writablehome}/packages/**" />

	</else>
      </if>
      
      <echo>  => Copying Greenstone's web/WEB-INF to writable area</echo>
      <copy todir="${gsdl3.writablehome}/WEB-INF" 
	    preservelastmodified="true"
	    failonerror="true" >  
	<fileset dir="${full.web.dir}/WEB-INF" includes="**"/>  
      </copy>

      <copy todir="${gsdl3.writablehome}" 
	    preservelastmodified="true"
	    failonerror="true" >  
	<fileset dir="${web.home}" includes="index.html"/>  
      </copy>

    </if>
  </if>


  <!--- flax: the WordNet home -->
  <property name="wn.home" value="${web.home}/WEB-INF/classes/flax/WordNet"/>

  <!-- jni libraries and java wrappers go here -->
  <property name="lib.jni" value="${basedir}/lib/jni"/>

  <!-- other jar files needed for installation (but not runtime) go here -->
  <property name="lib.java" value="${basedir}/lib/java"/>
  
  <property name="javadocs" value="${basedir}/docs/javadoc"/>

  <property name="app.name"      value="greenstone3"/>
  <property name="app.path"      value="/${app.name}"/>

   <property name="admin.dir"      value="${basedir}/admin"/>

  <!-- defaults - set these on the command line or in build.properties or 
       they will take these default values-->
  <property name="app.version" value="trunk"/>
  <property name="branch.path" value="trunk"/>
  <property name="branch.revision" value="HEAD"/>

  <!--constants -->
  <property name="svn.root" value="http://svn.greenstone.org"/>

  <!-- catalina home is set to tomcat basedir if already installed, otherwise
       use greenstone's tomcat -->
  <condition property="catalina.home" value="${tomcat.installed.path}" else="${packages.home}/tomcat"> 
    <and>
      <isset property="tomcat.installed.path"/>
      <not>
	<equals arg1="" arg2="${tomcat.installed.path}"/>
      </not>
    </and>
  </condition>
 

  <!-- is there a better way to do this?? what about solaris?? -->
  <condition property="os.bin.dir" value="${cross.os}">
      <istrue value="${compile.cross}"/>
  </condition>
  <condition property="os.bin.dir" value="windows">
    <os family="windows"/>
  </condition>
  <condition property="os.bin.dir" value="darwin">
    <os family="mac"/>
  </condition>
  <condition property="os.bin.dir" value="linux">
    <and>
      <os family="unix"/>
      <not>
	<os family="mac"/>
      </not>
    </and>
  </condition>

  
  <condition property="collection.building.disabled">
    <and>
      <isset property="disable.collection.building"/>
      <istrue value="${disable.collection.building}"/>
    </and>
  </condition>

  <condition property="collection.building.enabled">
    <not>
      <istrue value="${disable.collection.building}"/>
    </not>
  </condition>
  
  <condition property="collection.building.enabled.windows">
    <and>
      <istrue value="${collection.building.enabled}"/>
      <isset property="current.os.iswindows"/>
    </and>
  </condition>
  
  <condition property="collection.building.enabled.unix">
    <and>
      <istrue value="${collection.building.enabled}"/>
      <isset property="current.os.isunix"/>
    </and>
  </condition>

  <condition property="static.arg" value="LDFLAGS=-static" else=" ">
    <isset property="compile.static"/>
  </condition>

  <!-- If building a release then we want to adjust environment variables so that the support library can be seen during compilation -->
  <if><bool><isset property="use.gnomelib.ext"/></bool>
	<property name="gnome-lib-dir" value="${basedir}/ext/gnome-lib-minimal/${os.bin.dir}"/>

	<if><bool><isset property="env.CFLAGS"/></bool>
		<property name="cflags.arg" value="CFLAGS=&quot;-I${gnome-lib-dir}/include ${env.CFLAGS}&quot;"/>
	<else>
		<property name="cflags.arg" value="CFLAGS=&quot;-I${gnome-lib-dir}/include&quot;"/>
	</else>
	</if>

	<if><bool><isset property="env.CPPFLAGS"/></bool>
		<property name="cppflags.arg" value="CPPFLAGS=&quot;-I${gnome-lib-dir}/include ${env.CPPFLAGS}&quot;"/>
	<else>
		<property name="cppflags.arg" value="CPPFLAGS=&quot;-I${gnome-lib-dir}/include&quot;"/>
	</else>
	</if>

	<if><bool><isset property="env.CXXFLAGS"/></bool>
		<property name="cxxflags.arg" value="CXXFLAGS=&quot;-I${gnome-lib-dir}/include ${env.CXXFLAGS}&quot;"/>
	<else>
        	<property name="cxxflags.arg" value="CXXFLAGS=&quot;-I${gnome-lib-dir}/include&quot;"/>
	</else>
	</if>

	<if><bool><isset property="env.LDFLAGS"/></bool>
		<property name="ldflags.arg" value="LDFLAGS=&quot;-L${gnome-lib-dir}/lib ${env.LDFLAGS}&quot;"/>
	<else>
        	<property name="ldflags.arg" value="LDFLAGS=&quot;-L${gnome-lib-dir}/lib&quot;"/>
	</else>
	</if>

	<if><bool><isset property="env.PATH"/></bool>
		<property name="path.arg" value="PATH=&quot;${gnome-lib-dir}/bin:${env.PATH}&quot;"/>
	<else>
        	<property name="path.arg" value="PATH=&quot;${gnome-lib-dir}/bin&quot;"/>
	</else>
	</if>

	<if><bool><isset property="env.PKG_CONFIG_PATH"/></bool>
		<property name="pcpath.arg" value="PKG_CONFIG_PATH=&quot;${gnome-lib-dir}/lib/pkgconfig:${env.PKG_CONFIG_PATH}&quot;"/>
	<else>
        	<property name="pcpath.arg" value="PKG_CONFIG_PATH=&quot;${gnome-lib-dir}/lib/pkgconfig&quot;"/>
	</else>
	</if>

	<if><bool><equals arg1="${os.bin.dir}" arg2="darwin"/></bool>
		<if><bool><isset property="env.DYLD_LIBRARY_PATH"/></bool>
			<property name="ldlpath.arg" value="DYLD_LIBRARY_PATH=&quot;${gnome-lib-dir}/lib:${env.DYLD_LIBRARY_PATH}&quot;"/>
		<else>
			<property name="ldlpath.arg" value="DYLD_LIBRARY_PATH=&quot;${gnome-lib-dir}/lib&quot;"/>
		</else>
		</if>
	<else>
		<if><bool><isset property="env.LD_LIBRARY_PATH"/></bool>
			<property name="ldlpath.arg" value="LD_LIBRARY_PATH=&quot;${gnome-lib-dir}/lib:${env.LD_LIBRARY_PATH}&quot;"/>
		<else>
			<property name="ldlpath.arg" value="LD_LIBRARY_PATH=&quot;${gnome-lib-dir}/lib&quot;"/>
		</else>
		</if>
	</else>
	</if>

	<else>
		<if><bool><isset property="env.CFLAGS"/></bool>
			<property name="cflags.arg" value="CFLAGS=&quot;${env.CFLAGS}&quot;"/>
        	<else>
			<property name="cflags.arg" value=" "/>
		</else>
		</if>

		<if><bool><isset property="env.CPPFLAGS"/></bool>
        		<property name="cppflags.arg" value="CPPFLAGS=&quot;${env.CPPFLAGS}&quot;"/>
        	<else>
			<property name="cppflags.arg" value=" "/>
		</else>
		</if>

		<if><bool><isset property="env.CXXFLAGS"/></bool>
			<property name="cxxflags.arg" value="CXXFLAGS=&quot;${env.CXXFLAGS}&quot;"/>
		<else>
			<property name="cxxflags.arg" value=" "/>
		</else>
		</if>

		<if><bool><isset property="env.LDFLAGS"/></bool>
			<property name="ldflags.arg" value="LDFLAGS=&quot;${env.LDFLAGS}&quot;"/>
		<else>
			<property name="ldflags.arg" value=" "/>
		</else>
		</if>

		<if><bool><isset property="env.PATH"/></bool>
			<property name="path.arg" value="PATH=&quot;${env.PATH}&quot;"/>
		<else>
			<property name="path.arg" value=" "/>
		</else>
		</if>

		<if><bool><isset property="env.PKG_CONFIG_PATH"/></bool>
			<property name="pcpath.arg" value="PKG_CONFIG_PATH=&quot;${env.PKG_CONFIG_PATH}&quot;"/>
		<else>
			<property name="pcpath.arg" value=" "/>
		</else>
		</if>

		<if><bool><equals arg1="${os.bin.dir}" arg2="darwin"/></bool>
			<if><bool><isset property="env.DYLD_LIBRARY_PATH"/></bool>
				<property name="ldlpath.arg" value="DYLD_LIBRARY_PATH=&quot;${env.DYLD_LIBRARY_PATH}&quot;"/>
			<else>
				<property name="ldlpath.arg" value=" "/>
			</else>
			</if>
		<else>
			<if><bool><isset property="env.LD_LIBRARY_PATH"/></bool>
				<property name="ldlpath.arg" value="LD_LIBRARY_PATH=&quot;${env.LD_LIBRARY_PATH}&quot;"/>
			<else>
				<property name="ldlpath.arg" value=" "/>
			</else>
			</if>
		</else>	 
		</if>
	</else>
  </if>
  <property name="allargs" value="${cflags.arg} ${cxxflags.arg} ${cppflags.arg} ${ldflags.arg} ${path.arg} ${ldlpath.arg} ${pcpath.arg}"/>

  <condition property="opt.cross.build" 
	     value="--build=${cross.build}" else=" ">
    <isset property="cross.build"/>
  </condition>


  <condition property="cross.configure.args" 
	     value="--host=${cross.host} ${opt.cross.build} CPP=${cross.host}-cpp CC=${cross.host}-gcc CXX=${cross.host}-g++ LD=${cross.host}-ld AR=${cross.host}-ar RANLIB=${cross.host}-ranlib STRIP=${cross.host}-strip ${cross.configure.extraargs} crossOS=${cross.os}" else=" ">
    <istrue value="${compile.cross}"/>
  </condition>

  <!-- if we're told to work with gnome-lib, or if there's a gnome-lib-minimal that the user
       has placed in gs2build/ext, then compile gs2build after sourcing gnome-lib environment -->
  <condition property="opt.gnomelibext.arg" 
	     value="--enable-gnome-lib-ext" else=" ">
    <or>
      <available file="${gs2build.home}/ext/gnome-lib-minimal" type="dir"/>
      <istrue value="${use.gnomelib.ext}"/>
      <istrue value="${checkout.gnomelib.ext}"/>
    </or>
   </condition>

<!-- if you want to disable wvware, do so here: set the value (not else) field to contain minus-minus-disable-wvware -->
  <condition property="gs2.opt.args" value="${opt.gnomelibext.arg} " else="--disable-mg --disable-mgpp --disable-accentfold --disable-gdbm --disable-sqlite">
    <istrue value="${with.jni}"/>
  </condition>
  <condition property="gs2.compile.target" value="with-jni" else="without-jni">
    <istrue value="${with.jni}"/>
  </condition>
  <condition property="gs2.install.target" value="install-with-jni" else="install-without-jni">
    <istrue value="${with.jni}"/>
  </condition>
  <condition property="gs2.windows.enablejni" value="1" else="0">
    <istrue value="${with.jni}"/>
  </condition>
  <condition property="gs2.windows.enablemg" value="1" else="0">
    <istrue value="${with.jni}"/>
  </condition>
  <condition property="gs2.windows.enablemgpp" value="1" else="0">
    <istrue value="${with.jni}"/>
  </condition>
  <!-- Should accent folding not also be set here ?? -->
  <condition property="gs2.windows.usegdbm" value="1" else="0">
    <istrue value="${with.jni}"/>
  </condition>
  <condition property="gs2.windows.usesqlite" value="1" else="0">
    <istrue value="${with.jni}"/>
  </condition>
  
  <!-- where is search4j tool -->
  <condition property="search4j.exec" value="bin/search4j.exe" else="bin/search4j"> 
    <isset property="current.os.iswindows"/>
  </condition>

  
  <!-- ============= Base dirs for each package and component ============ -->
  <property name="src.gsdl3.home" value="${src.home}/org/greenstone/gsdl3"/>
  <property name="anttasks.home" value="${src.home}/org/greenstone/anttasks"/>
  <property name="gli.home" value="${basedir}/gli"/>
  <property name="javagdbm.home" value="${src.packages.home}/javagdbm"/>

  <condition property="common.src.home" value="${basedir}/common-src" else="${gs2build.home}${file.separator}common-src">
    <istrue value="${disable.collection.building}"/>
  </condition>
  
  <property name="build.src.home" value="${gs2build.home}/build-src"/>
  <property name="gdbm.home" value="${common.src.home}/packages/gdbm"/>
  <property name="mg.home" value="${common.src.home}/indexers/mg"/>
  <property name="mgpp.home" value="${common.src.home}/indexers/mgpp"/>
  <property name="lucene.home" value="${common.src.home}/indexers/lucene-gs"/>

  <!--  ==================== Compilation Control Options ==================== -->

  <!--

  These properties control option settings on the Javac compiler when it
  is invoked using the <javac> task.

  compile.debug        Should compilation include the debug option?

  compile.deprecation  Should compilation include the deprecation option?

  compile.optimize     Should compilation include the optimize option?

  -->

  <property name="compile.debug"       value="true"/>
  <property name="compile.deprecation" value="true"/>
  <property name="compile.optimize"    value="true"/>
  <property name="compile.encoding"    value="UTF8"/>
  <property name="compile.includeantruntime" value="false"/> <!-- to get rid of annoying 'ant' warning -->

  <!--

  Rather than relying on the CLASSPATH environment variable, Ant includes
  features that makes it easy to dynamically construct the classpath you
  need for each compilation.  The example below constructs the compile
  classpath to include the servlet.jar file, as well as the other components
  that Tomcat makes available to web applications automatically, plus anything
  that you explicitly added.

  -->
  
  <!-- All elements that Tomcat 5 exposes to applications -->
  <path id="tomcat5">
    <pathelement location="${catalina.home}/common/classes"/>
    <fileset dir="${catalina.home}/common/endorsed">
      <include name="*.jar"/>
    </fileset>
    <fileset dir="${catalina.home}/common/lib">
      <include name="*.jar"/>
    </fileset>
    <!-- seems to be empty, but will leave in just in case some people make use of this to customise their install: -->
    <pathelement location="${catalina.home}/shared/classes"/>
    <fileset dir="${catalina.home}/shared/lib">
      <include name="*.jar"/>
    </fileset>
  </path>
  
  <!-- All elements that Tomcat 7 exposes to applications -->
  <path id="tomcat7">
    <fileset dir="${catalina.home}/lib">
      <include name="*.jar"/>
    </fileset>
  </path>
  
  <path id="compile.classpath">
    <!-- Include all jar files and libraries in our jni lib directory -->
    <pathelement location="${lib.jni}"/>
    <fileset dir="${lib.jni}">
      <include name="*.jar"/>
    </fileset>
    <!-- Include all jar files in our web lib directory -->
    <pathelement location="${web.lib}"/>
    <fileset dir="${web.lib}">
      <include name="*.jar"/>
    </fileset>
    
    <pathelement location="${lib.java}"/>
    <fileset dir="${lib.java}">
      <include name="*.jar"/>
    </fileset>
    
    <!-- include the jar files from the source packages -->
    <!-- mg and mgpp get installed into lib/jni but they may not be there yet
    so we add them in by name -->
    <!-- *** is there any way to make this optional, based on ${with.jni}? -->
    <pathelement location="${lib.jni}/mg.jar"/>
    <pathelement location="${lib.jni}/mgpp.jar"/>
    
    <!-- Include all elements that Tomcat exposes to applications -->
    <path refid="tomcat${tomcat.version.major}"/>
    
  </path>

  <path id="local.tomcat.classpath">
    <!-- explicitly include the jni java wrappers in the classpath -->
    <pathelement location="${lib.jni}"/>
    <fileset dir="${lib.jni}">
      <include name="*.jar"/>
    </fileset>
	
    <pathelement location="${web.writablelib}"/>
    <fileset dir="${web.writablelib}">
      <include name="derbyclient.jar"/> <!--<include name="derby.jar"/>-->
    </fileset>
  </path>
  
  <path id="derby.server.classpath">
    <pathelement location="${web.writablelib}/derbynet.jar"/>
    <pathelement location="${web.writablelib}/derby.jar"/>
  </path>


  <path id="local.tomcat.path">
    <pathelement location="${basedir}/bin/script"/>
    <pathelement location="${basedir}/bin"/>
    <pathelement location="${lib.jni}"/>
    <pathelement path="${env.PATH}"/>
    <pathelement path="${env.Path}"/>
    <pathelement path="${wn.home}/bin"/>
  </path>

  <target name="test-setup">
    <echo>ant java version=${ant.java.version}</echo>
    <echo>is unix : ${current.os.isunix}</echo>
    <echo>is mac : ${current.os.ismac}</echo>
    <echo>is unixnotmac : ${current.os.isunixnotmac}</echo>
    <echo>is windows : ${current.os.iswindows}</echo>
    <echo>os.unix: ${os.unix}</echo>
  </target>

  <!-- Appends the current env to the file environment.txt. For debugging env vars used by the release-kit. -->
  <target name="write-env" description="Writes out the environment that this build.xml is executed in to file environment.txt. For debugging.">
    <echo message="*****************ENVIRONMENT OUTPUT:****************${line.separator}" file="environment.txt" append="true" />

    <if><bool><istrue value="${current.os.iswindows}"/></bool>
      <exec executable="set" dir="${basedir}" failonerror="false" output="environment.txt" append="true">      
	<arg value="/c" />
	<arg value="set" />
      </exec>
      <else>
	<exec executable="env" dir="${basedir}" failonerror="false" output="environment.txt" append="true" />
      </else>
    </if>

    <echo message="${line.separator}" file="environment.txt" append="true" />
  </target>

  
  <!-- ==================== Primary and Global Targets ============================= -->

  <target name="prepare" depends="accept-properties,init,copy-dot-in-files,prepare-core,prepare-packages,prepare-common-src,prepare-collection-building,prepare-tomcat,prepare-axis,prepare-web,prepare-collections, prepare-flax"
    description="Use this when you first checkout the code: 'ant prepare install'. This will do some additional subversion checkouts and downloads, so you need to be online to run this.">

    <!-- make sure .sh files are executable -->
    <chmod dir="${basedir}" perm="ugo+rx" 
      includes="*.sh"/>
    <chmod dir="${basedir}/bin/script" perm="ugo+rx" 
      includes="*.sh,*.pl"/>
  </target>

  <!-- install-common-src and install-collection-building are mutually exclusive and either one or the other will be done depending on whether collection building is enabled or not -->
  <!--before configuring build-src, make sure that gnome-lib is compiled up-->
  <target name="install" depends="init,compile-imagemagick,compile-gnome-lib,install-common-src,install-collection-building,install-runtime,install-solr-ext,setup-for-eclipse,get-isisgdl"
    description="Install Greenstone 3. Use this when you first checkout the code: 'ant prepare new-install'."/>

  <target name="install-common-src" depends="init" 
    description="Install (configure, compile, install) only the common-src package (shared code from Greenstone 2). " >
    <antcall target="configure-common-src"/>
    <antcall target="compile-common-src"/>
    <antcall target="install-auxiliary-jar-files"/>
    <antcall target="install-jni-files"/>
  </target>

  <target name="install-collection-building" depends="init" if="collection.building.enabled"
    description="Install (configure, compile, install) the Greenstone 2 collection building package." >
    <antcall target="configure-collection-building"/>
    <antcall target="tweak-makefiles" />
    <antcall target="compile-collection-building"/>
  </target>
    

  <target name="install-runtime" depends="init,configure,configure-packages,configure-core,compile-web,compile-packages,compile-core,compile-classpath-jars"
    description="Install (configure, compile, install) the runtime system. Needs either common-src or collection-building to have been installed first." />
    
  <target name="svnupdate" depends="init,svnupdate-packages,svnupdate-core,svnupdate-common-src,svnupdate-collection-building,svnupdate-web"
    description="Do a `svn update` for all sources. Doesn't recompile the code. You need to be online to run this."/>
  
  <target name="configure" depends="init,configure-tomcat,configure-web"
    description="Configure the installation (not the C++ code). Includes setting up config files. Should be re-run if you change the build.properties file, including if you change the port number."/>

  <target name="clean" depends="init,clean-packages,clean-core,clean-common-src,clean-collection-building,clean-classpath-jars"
    description="Remove all old compiled code. Includes runtime and collection-building if necessary"/>
  
  <target name="distclean" depends="init,distclean-packages,clean-core,distclean-common-src,distclean-collection-building,clean-classpath-jars"
    description="Remove all compiled code and also any Makefiles etc generated during configure-c++. Includes runtime and collection-building as necessary"/>
  
  <target name="update" depends="init,svnupdate,clean,install"
    description="Update (thru Subversion) all the source (including common-src or collection-building, and runtime), then clean, and re-install. To do this without any SVN updates, run it like 'ant -Dnosvn.mode=yes update'"/>


  <target name="perl-for-building" depends="init">
    <!-- uses perl.path if set in build.properties, otherwise try for
         environment variable PERLPATH, and failing that assumes 'perl' 
         is on environment PATH -->
    <!-- if, outside build.properties, we only set perl.path if we have gs2build/build-src (collection building), then we won't set perl.path in a (flax) binary, since it doesn't have build-src -->
    <if><bool><available file="${gs2build.home}"/></bool>

      <if><bool><not><isset property="perl.path"/></not></bool>

        <if>
          <bool>
            <and>
              <isset property="env.PERLPATH"/>
              <not><equals arg1="${env.PERLPATH}" arg2=""/></not>
            </and>
          </bool>
		  <!-- set perlpath to env.PERLPATH. 
		    This is the path to perl\bin that's found by findperl.bat when the server is launched 
			through GLI instead of the console.
			For windows, this env.PERLPATH is the bin folder and needs a backslash at end, since it 
			will appear suffixed with "perl.exe" in the perl setting in packages\tomcat\config\web.xml. 
			This web.xml's path to perl is then used to find perl when running the perl scripts in the 
			cgi folder, so without a slash appended at this point it becomes "binperl" in web.xml, and 
			things will break when GLI launches the server on Windows and the online GS3 metadata editor 
			is used	to save user-edited metadata. -->
		  <if><bool><istrue value="${current.os.iswindows}"/></bool>
			<property name="perl.path" value="${env.PERLPATH}\"/>
		  <else>
			<property name="perl.path" value="${env.PERLPATH}"/>
		  </else>	
		  </if>
		  
          <else>
            <echo>
  Using PATH environment variable to locate Perl.
            </echo>
            <exec executable="which" os="${os.unix}" spawn="false" outputproperty="full.perl.path">
              <arg value="perl" />
            </exec>

	    <exec executable="${gs2build.home}/bin/windows/which" osfamily="windows" spawn="false" outputproperty="full.perl.path">
              <arg value="perl" />
            </exec>

            <stringutil string="${full.perl.path}" property="partial.perl.path">
                <replace regex="\/[^\/]*$" replacement="/" />
            </stringutil>
	    <stringutil string="${partial.perl.path}" property="perl.path">
                <replace regex="\\[^\\]*$" replacement="\\" />
            </stringutil>
            <if><bool><istrue value="${current.os.isunix}"/></bool>
              <if><bool><not><equals arg1="${full.perl.path}" arg2="/usr/bin/perl"/></not></bool>
                <echo>
    Non-standard location of Perl found: ${full.perl.path}
    Set the environment variable PERLPATH or the perl.path property in
    build.properties to explicitly control the version of Perl used.
                </echo>
              </if>
            </if>
          </else>
        </if>
      </if>

      <!-- full.perl.path is for pretty-printing only, e.g. used in target "start" -->
      <if><bool><isset property="perl.path"/></bool>
        <property name="full.perl.path" value="${perl.path}${file.separator}perl"/>
        <else>
          <property name="full.perl.path" value="perl (will use the enviroment variable PATH to find this executable)"/>
        </else>
      </if>

      <!-- gs2build not available, perl.path -->
      <else>
	<property name="perl.path" value=""/>
      </else>
    </if>
    <stringutil string="${perl.path}" property="escaped.perl.path">
      <replace regex="\\" replacement="\\\\" />
    </stringutil>
  </target>

  <target name="get-default-servlet-url">
    <echo>http://${tomcat.server}:${tomcat.port}${app.path}${server.default.servlet}</echo>
  </target> 

  <target name="check-derbyserver-running">
    <condition property="derby.isrunning" value="true" else="false">
      <!--<socket server="jdbc:derby://${derby.server}" port="${derby.server.port}"/>-->
      <socket server="${derby.server}" port="${derby.server.port}"/><!-- like telnet machine port -->
    </condition>
    <echo>Derby is running: ${derby.isrunning}</echo>
  </target>

  <!-- Need a copy of the check-derby-running target with a distinct property, because ant restart runs 
       both stop and start, which stop and start derby respectively. Both  need check the derby socket.
       Because each property can be set only once during an invocation with ant, ant restart will need 
       two check-derbyserver properties, one for each derby check. -->
  <target name="check-derbyserver-started">
    <condition property="derby.isstarted" value="true" else="false">
      <socket server="${derby.server}" port="${derby.server.port}"/>
    </condition>
    <echo>Derby is running: ${derby.isstarted}</echo>
  </target>


  <!-- Unused -->
  <target name="start-derby-java" depends="check-derbyserver-running">
    <if><bool><not><istrue value="${derby.isrunning}"/></not></bool>
      <echo>Launching derby on ${derby.server}:${derby.server.port}...</echo>
      <java classname="org.apache.derby.drda.NetworkServerControl" fork="true" spawn="true" clonevm="true">      
	<arg value="start"/>
	<classpath refid="derby.server.classpath"/>
      </java>
      <else>
	<echo>Derby server ALREADY RUNNING on ${derby.server}:${derby.server.port}</echo>
      </else>
    </if>
  </target>
  
  <target name="start-derby" depends="check-derbyserver-started">
    <if><bool><not><istrue value="${derby.isstarted}"/></not></bool>
      <echo>About to launch derby on ${derby.server}:${derby.server.port}</echo>
      <antcall target="force-start-derby"/>
      <else>
	<echo>Derby networked server ALREADY RUNNING on ${derby.server}:${derby.server.port}</echo>
      </else>
    </if>
  </target>

  <!-- Using derby 10.1.2.1
       See db-derby-10.1.2.1-bin/docs/html/adminguide/index.html -->
  <target name="force-start-derby">
      <property name="derby.server.classpath.prop" refid="derby.server.classpath" />
      
      <exec executable="java" spawn="true"><!-- failonerror="true"-->
	<env key="CLASSPATH" path="${derby.server.classpath.prop}"/>
	<arg value="org.apache.derby.drda.NetworkServerControl"/>
	<arg value="start"/>
	<arg value="-p"/>
	<arg value="${derby.server.port}"/>
      </exec>

  </target>

  <target name="force-stop-derby">
    <java classname="org.apache.derby.drda.NetworkServerControl">
      <arg value="shutdown"/>
      <arg value="-p"/>
      <arg value="${derby.server.port}"/>
      <classpath refid="derby.server.classpath"/>
    </java>
  </target>

  <target name="stop-derby" description="Shutdown derby server only if running" depends="check-derbyserver-running"><!-- if="${derby.isrunning}" checks if true or false only from ant 1.8 on -->
    <if><bool><istrue value="${derby.isrunning}"/></bool>
      <!--<echo>Derby is |${derby.isrunning}| running</echo>-->
      <antcall target="force-stop-derby"/>
      <else>
	<echo>Derby is not running</echo>
      </else>
    </if>
  </target>

  <target name="start" depends="init,configure-tomcat,configure-web,configure-solr-ext,start-derby,start-tomcat"
    description="Startup the Tomcat server." >
    <echo>${app.name} (${app.version}) server running using Apache Tomcat and Java</echo> 
    <echo>Tomcat: ${catalina.home}</echo> 
    <echo>Java  : ${java.home}</echo>
    <if><bool><available file="${build.src.home}"/></bool>
      <echo>Perl  : ${full.perl.path}</echo>
    </if>
    <if><bool><isset property="install.flax"/></bool>
        <property name="url" value="http://${tomcat.server}:${tomcat.port}${app.path}/flax"/>
    <else>
        <property name="url" value="http://${tomcat.server}:${tomcat.port}${app.path}/"/>
    </else>
    </if>
    <echo>URL   : ${url}</echo>
    <!-- assuming that index.html is not needed here -->   

    <!--Now write out the url with oaiserver suffix as the baseURL property in OAIConfig.xml-->
    <available file="${basedir}/resources/oai/OAIConfig.xml" property="oaiconfig.present"/>
    <antcall target="init-oaiconfig">
      <param name="url" value="${url}"/>
    </antcall>
  </target>

  <target name="init-oaiconfig" if="oaiconfig.present">
    <echo>Writing out baseURL ${url}oaiserver to ${web.writableclasses}/OAIConfig.xml</echo>
    <copy file="${basedir}/resources/oai/OAIConfig.xml" tofile="${web.writableclasses}/OAIConfig.xml"/>
    <rsr verbosity="1" file="${web.writableclasses}/OAIConfig.xml" pattern="&lt;baseURL&gt;.*&lt;/baseURL&gt;" replacement="&lt;baseURL&gt;${url}oaiserver&lt;/baseURL&gt;" />   
  </target>

  <target name="stop" depends="init,stop-tomcat,stop-derby" 
    description="Shutdown the Tomcat server."/>
  
  <target name="restart" description="Shutdown and restart Tomcat"  depends="init,stop,start"/>

  <!-- =========== Help targets ===================================  -->
  
  <property name="install-command" value="ant [options] prepare install"/>
  
  <target name="usage" description="Print a help message">
    <echo message="  Execute 'ant -projecthelp' for a list of targets."/>
    <echo message="  Execute 'ant -help' for Ant help."/>
    <echo>
  To install Greenstone3, run '${install-command}'. 
    There are properties defined in build.properties. The install 
      process will ask you if these properties are set correctly. 
      To avoid this prompt, use the '-Dproperties.accepted=yes' 
      option.
    To log the output, use the '-logfile build.log' option.
  The README.txt file has more information about the ant targets
    and install process.
    </echo>
  </target>
  
  <target name="help" depends="usage" description="Print a help message"/>
  
  <target name="debug" depends="init" description="Display all the currently used properties">
    <echoproperties/>
  </target>

  <!-- ====== initialization and setup targets ================== -->

  <target name="accept-properties" unless="properties.accepted">
    <input addproperty="properties.ok" validargs="y,n">The following properties (among others) are being used from a build.properties file found in this directory:
      tomcat.server=${tomcat.server}
      tomcat.port=${tomcat.port} 
      tomcat.installed.path=${tomcat.installed.path} (this is the location of Tomcat's base dir if it is already installed)
      proxy.host=${proxy.host}
      proxy.port=${proxy.port}
      disable.collection.building=${disable.collection.building}
      If these are not acceptable, please change them and rerun this target. Continue [y/n]?
    </input>
    <condition property="do.abort"> 
      <equals arg1="n" arg2="${properties.ok}"/>
    </condition>
    <fail if="do.abort">Build aborted by user. Please change your properties settings and re-run the target</fail>
  </target>
  
  <!-- this sets up some initial properties -->
  <target name="init">

    <!-- has the gs3-setup script been run?? -->
    <condition property="gs3-setup-not-done">
      <not>
	<isset property="env.GSDL3HOME"/>
      </not>
    </condition>

    <!--<fail if="gs3-setup-not-done" message="please run 'gs3-setup' (Windows) or 'source gs3-setup.sh' (Linux/Mac) before running this target."/>-->
    
    <condition property="java.too.old">
      <or>
        <equals arg1="1.1" arg2="${ant.java.version}"/>
        <equals arg1="1.2" arg2="${ant.java.version}"/>
        <equals arg1="1.3" arg2="${ant.java.version}"/>
      </or>
    </condition>
    <fail if="java.too.old" message="You need Java 1.4 or greater to run Greenstone 3"/>
    
    <available file="${basedir}/gli" property="gli.present"/>
    <available file="${basedir}/common-src" property="common.src.present"/>
    <available file="${basedir}/gs2build" property="gs2build.present"/>
    <available file="${gnome-lib-dir}" property="gnome-lib.present"/>

    <condition property="tomcat.islocal">
      <or>
        <not><isset property="tomcat.installed.path"/></not>
        <equals arg1="" arg2="${tomcat.installed.path}"/>
      </or>
    </condition>
    
    <echo>tomcat.port = ${tomcat.port}</echo>

    <condition property="proxy.present">
      <and>
        <isset property="proxy.host"/>
        <not><equals arg1="" arg2="${proxy.host}"/></not>
      </and>
    </condition>

    <!--
    the next block checks if the bundled tomcat is present in the 'packages' directory,
    and checks for the lethal combination of tomcat 7 and java 1.4. Test for
    tomcat6 is based on the presence of a file inserted by greenstone into the tomcat6
    download, as there is no other surefire way to check tomcat version under java 1.4
    -->
    <condition property="packages.tomcat.ispresent" value="true" else="false">
      <available file="packages/tomcat"/>
    </condition>
    <condition property="packages.tomcat.istomcat7" value="true" else="false">
      <available file="packages/tomcat/tomcat7.txt"/>
    </condition>
    <if>
      <bool>
        <and>
          <istrue value="${packages.tomcat.ispresent}"/>
          <istrue value="${packages.tomcat.istomcat7}"/>
          <equals arg1="1.4" arg2="${ant.java.version}"/>
        </and>
      </bool>
      <fail>Your Java (version 1.4) is too old to work with the bundled Apache Tomcat (version 6). Please upgrade to Java version 1.5 or greater. Alternatively, you may remove the bundled Apache Tomcat from the 'packages' folder and then run 'ant prepare-tomcat'.</fail>
    </if>

  </target>

  <target name="setup-proxy" depends="init" if="proxy.present">
    <condition property="ask.user">
      <or>
        <equals arg1="" arg2="${proxy.user}"/>
        <equals arg1="" arg2="${proxy.password}"/>
      </or>
    </condition>
    
    <getuserandpassword message="Using proxy: ${proxy.host}:${proxy.port}" if="ask.user" username="${proxy.user}" userproperty="proxy.username" pwordproperty="proxy.password"/>
    <mysetproxy proxyhost="${proxy.host}" proxyport="${proxy.port}" proxyuser="${proxy.username}" proxypassword="${proxy.password}"/>
  </target>
  
  <target name="copy-dot-in-files" depends="init" 
	  description="Copies all resources .in files to version without the .in suffix" >
    <if><bool><available file="${basedir}/resources/tomcat/greenstone3.xml"/></bool>
      <copy file="${basedir}/resources/tomcat/greenstone3.xml" tofile="${basedir}/resources/tomcat/greenstone3.xml.backup"  overwrite="true"/>
    </if>
   
    <copy file="${basedir}/resources/tomcat/greenstone3.xml.in" tofile="${basedir}/resources/tomcat/greenstone3.xml"  overwrite="true"/>
    <if><bool><available file="${basedir}/resources/tomcat/server_tomcat5.xml"/></bool>
      <copy file="${basedir}/resources/tomcat/server_tomcat5.xml" tofile="${basedir}/resources/tomcat/server_tomcat5.xml.backup"  overwrite="true"/>
    </if>
    <copy file="${basedir}/resources/tomcat/server_tomcat5.xml.in" tofile="${basedir}/resources/tomcat/server_tomcat5.xml"  overwrite="true"/>
    <if><bool><available file="${basedir}/resources/tomcat/server_tomcat7.xml"/></bool>
      <copy file="${basedir}/resources/tomcat/server_tomcat7.xml" tofile="${basedir}/resources/tomcat/server_tomcat7.xml.backup"  overwrite="true"/>
    </if>
    <copy file="${basedir}/resources/tomcat/server_tomcat7.xml.in" tofile="${basedir}/resources/tomcat/server_tomcat7.xml" overwrite="true"/>
    <if><bool><available file="${basedir}/resources/tomcat/web.xml"/></bool>
      <copy file="${basedir}/resources/tomcat/web.xml" tofile="${basedir}/resources/tomcat/web.xml.backup"  overwrite="true"/>
    </if>
    <copy file="${basedir}/resources/tomcat/web.xml.in" tofile="${basedir}/resources/tomcat/web.xml"  overwrite="true"/>
    <if><bool><available file="${basedir}/resources/oai/OAIConfig.xml"/></bool>
    <copy file="${basedir}/resources/oai/OAIConfig.xml" tofile="${basedir}/resources/oai/OAIConfig.xml.backup"  overwrite="true"/>
    </if>
    <copy file="${basedir}/resources/oai/OAIConfig.xml.in" tofile="${basedir}/resources/oai/OAIConfig.xml"  overwrite="true"/>
    <if><bool><available file="${basedir}/resources/cgi/gsdl3site.cfg"/></bool>
      <copy file="${basedir}/resources/cgi/gsdl3site.cfg" tofile="${basedir}/resources/cgi/gsdl3site.cfg.backup" overwrite="true"/>
    </if>
    <copy file="${basedir}/resources/cgi/gsdl3site.cfg.in" tofile="${basedir}/resources/cgi/gsdl3site.cfg" overwrite="true"/>
    <if><bool><available file="${basedir}/resources/web/global.properties"/></bool>
    <copy file="${basedir}/resources/web/global.properties" tofile="${basedir}/resources/web/global.properties.backup" overwrite="true"/>
    </if>
    <copy file="${basedir}/resources/web/global.properties.in" tofile="${basedir}/resources/web/global.properties" overwrite="true"/>
    <if><bool><available file="${basedir}/resources/web/log4j.properties"/></bool>
    <copy file="${basedir}/resources/web/log4j.properties" tofile="${basedir}/resources/web/log4j.properties.backup" overwrite="true"/>
    </if>
    <copy file="${basedir}/resources/web/log4j.properties.in" tofile="${basedir}/resources/web/log4j.properties" overwrite="true"/>
  </target>
  <!-- ========== Web app Targets ================================ -->
  
  <target name="prepare-web" depends="init">
    <mkdir dir="${web.writablehome}/applet"/>
    <mkdir dir="${web.writablehome}/logs"/>
    <mkdir dir="${web.writablehome}/logs/tmp"/>
  </target>
  
  <!-- if we are using java 1.5+, we need the xalan.jar file in web/WEB-INF/lib,  but if we are using java 1.4, we can't have it there.
       The test for whether we need it assumes we won't be trying to compile GS3 against Java versions less than 1.4. -->
  <target name="configure-java-version" depends="init"
    description="Activates or deactivates some jar libraries as needed depending on your java version">

    <available property="have.xalan.jar" file="${web.lib}/xalan.jar"/>
    <condition property="need.xalan.jar">
      <or>
        <not><equals arg1="1.4" arg2="${ant.java.version}"/></not>
      </or>
    </condition>

    <!-- if they have xalan.jar but dont need it -->
    <if>
      <bool>
        <and>
          <isset property="have.xalan.jar"/>
          <not><isset property="need.xalan.jar"/></not>
        </and>
      </bool>
      <antcall target="deactivate-xalan-jar"/>
    </if>

    <!-- if they need xalan.jar but dont have it -->
    <if>
      <bool>
        <and>
          <not><isset property="have.xalan.jar"/></not>
          <isset property="need.xalan.jar"/>
        </and>
      </bool>
      <antcall target="activate-xalan-jar"/>
    </if>

  </target>
  
  <target name="activate-xalan-jar">
    <echo>activating xalan.jar</echo>
    <copy file="${web.lib}/xalan.jar.tmp" tofile="${web.lib}/xalan.jar"/>
    <if>
      <bool>
	<and>
	  <isset property="current.os.ismac"/>
	  <available file="${catalina.home}/common/endorsed" type="dir"/>
	</and>
      </bool>
      <copy file="${web.lib}/xalan.jar.tmp" tofile="${catalina.home}/common/endorsed/xalan.jar"/> 
    </if>
  </target>

  <target name="deactivate-xalan-jar">
    <echo>deactivating xalan.jar</echo>
    <delete file="${web.lib}/xalan.jar"/>
    <!-- should we be deleting common/endorsed/xalan.jar on mac?? -->
  </target>


  <target name="prepare-collections" depends="init"
    description="Unpack all the collections from their svn zipped versions">
    <property name="collect.dir" value="${web.home}/sites/localsite/collect"/>
    <property name="index.zip" value="index.zip"/>

    <echo message="installing collections..."/>
    <antcall target="gs2mgdemo-install"/>
    <antcall target="gs2mgppdemo-install"/>
    <antcall target="gberg-install"/>
    <antcall target="lucene-jdbm-demo-install"/>
  </target>

  <target name="gs2mgdemo-prepare" if="collect.dir">
    <property name="gs2mgdemo.dir" value="${collect.dir}/gs2mgdemo"/>

    <condition property="gs2mgdemo.present">
      <and>
        <available file="${gs2mgdemo.dir}/${index.zip}"/>
      </and>
    </condition>
  </target>

  <target name="gs2mgdemo-install" if="gs2mgdemo.present" depends="gs2mgdemo-prepare">
    <unzip dest="${gs2mgdemo.dir}" src="${gs2mgdemo.dir}/${index.zip}" />
    <echo>collection gs2mgdemo installed</echo>
  </target>

  <target name="gs2mgppdemo-prepare" if="collect.dir">
    <property name="gs2mgppdemo.dir" value="${collect.dir}/gs2mgppdemo"/>
 
    <condition property="gs2mgppdemo.present">
      <and>
        <available file="${gs2mgppdemo.dir}/${index.zip}"/>
      </and>
    </condition>
  </target>

  <target name="gs2mgppdemo-install" if="gs2mgppdemo.present" depends="gs2mgppdemo-prepare">
    <unzip dest="${gs2mgppdemo.dir}" src="${gs2mgppdemo.dir}/${index.zip}" />
    <echo>collection gs2mgppdemo installed</echo>
  </target>    

  <target name="gberg-prepare" if="collect.dir">
    <property name="gberg.dir" value="${collect.dir}/gberg"/>
    <available file="${gberg.dir}/index/${index.zip}" property="gberg.present"/>
  </target>

  <target name="gberg-install" if="gberg.present" depends="gberg-prepare">
    <unzip dest="${gberg.dir}/index" src="${gberg.dir}/index/${index.zip}"/>
    <echo>collection gberg installed</echo>
  </target>

  <target name="lucene-jdbm-demo-prepare" if="collect.dir">
    <property name="lucene-jdbm-demo.dir" value="${collect.dir}/lucene-jdbm-demo"/>
    <available file="${lucene-jdbm-demo.dir}/${index.zip}" property="lucene-jdbm-demo.present"/>
  </target>

  <target name="lucene-jdbm-demo-install" if="lucene-jdbm-demo.present" depends="lucene-jdbm-demo-prepare">
    <unzip dest="${lucene-jdbm-demo.dir}" src="${lucene-jdbm-demo.dir}/${index.zip}"/>
    <echo>collection lucene-jdbm-demo installed</echo>
  </target>

  
  <target name="install-solr-ext" depends="init" >
    <exec executable="ant.bat" osfamily="windows" dir="${solr-ext.home}" spawn="false">
      <arg value="add-service"/>
    </exec>
    <exec executable="ant" os="${os.unix}" dir="${solr-ext.home}" spawn="false">
      <arg value="add-service"/>
    </exec>
    <antcall target="solr-jdbm-demo-install"/>
  </target>

  <target name="solr-jdbm-demo-prepare" if="collect.dir">
    <property name="solr-jdbm-demo.dir" value="${collect.dir}/solr-jdbm-demo"/>
    <available file="${solr-jdbm-demo.dir}/${index.zip}" property="solr-jdbm-demo.present"/>
  </target>

  <target name="solr-jdbm-demo-install" if="solr-jdbm-demo.present" depends="solr-jdbm-demo-prepare">
    <unzip dest="${solr-jdbm-demo.dir}" src="${solr-jdbm-demo.dir}/${index.zip}"/>
    <echo>collection solr-jdbm-demo installed</echo>
  </target>

  <!-- Until 64 bit Linux and Mac (Lion) machines can generate a working IsisGdl, 
       use the ones generated on a 32 bit Linux and Mac (Leopard), respectively -->
  <target name="get-isisgdl" if="${current.os.isunix}">
    <exec executable="uname" dir="${basedir}" failonerror="false"
	  outputproperty="uname.val">
      <arg value="-m"/>
    </exec>
    
    <if><bool><equals arg1="${uname.val}" arg2="x86_64"/></bool>
      <echo>Bitness: ${uname.val}</echo>
      <if><bool><contains string="${os.bin.dir}" substring="darwin" casesensitive="false"/></bool>
	<get src="http://www.greenstone.org/caveat-emptor/IsisGdl.macleopard"
             dest="${basedir}/gs2build/bin/${os.bin.dir}/IsisGdl"/>	  
      </if>
      <if><bool><contains string="${os.bin.dir}" substring="linux" casesensitive="false"/></bool>
	<get src="http://www.greenstone.org/caveat-emptor/IsisGdl.bin32"
             dest="${basedir}/gs2build/bin/${os.bin.dir}/IsisGdl"/>
      </if>
      <chmod file="${basedir}/gs2build/bin/${os.bin.dir}/IsisGdl" perm="755"/>
    </if>
  </target>

  <target name="set-perl-shebangs" depends="perl-for-building">
    <if>
      <bool>
        <and><isset property="perl.path"/>
          <not><equals arg1="${perl.path}" arg2=""/></not>
        </and>
      </bool>

      <if><bool><istrue value="${current.os.iswindows}"/></bool>
	<property name="perl.exec" value="${perl.path}perl.exe"/>
	<else>
	  <property name="perl.exec" value="${perl.path}perl"/>	  
	</else>
      </if>

      <!--<echo>**** PERLPATH: ${perl.path}</echo>-->
      <echo>Setting perl shebangs to Perl Exec: ${perl.exec}</echo>

      <!-- set the shebangs in the cgi files to point to the correct perlpath -->
      <if>
	<bool><not><equals arg1="${web.home}" arg2="${web.writablehome}"></equals></not></bool>
	<mkdir dir="${web.writablehome}"/>
	<copy file="${full.web.dir}/WEB-INF/cgi/gliserver.pl"       tofile="${web.writablehome}/WEB-INF/cgi/gliserver.pl"       overwrite="true"/>
	<copy file="${full.web.dir}/WEB-INF/cgi/metadata-server.pl" tofile="${web.writablehome}/WEB-INF/cgi/metadata-server.pl" overwrite="true"/>
	<copy file="${full.web.dir}/WEB-INF/cgi/checksum.pl"        tofile="${web.writablehome}/WEB-INF/cgi/checksum.pl"        overwrite="true"/>
      </if>

      <rsr verbosity="1" file="${web.writablehome}/WEB-INF/cgi/gliserver.pl" pattern="^#!.*" replacement="#!${perl.exec} -w" lines="1"/>
      <rsr verbosity="1" file="${web.writablehome}/WEB-INF/cgi/metadata-server.pl" pattern="^#!.*" replacement="#!${perl.exec} -w" lines="1"/> 
      <rsr verbosity="1" file="${web.writablehome}/WEB-INF/cgi/checksum.pl" pattern="^#!.*" replacement="#!${perl.exec} -w" lines="1"/> 	
      <else>
	<echo>WARNING: perl.path is empty. Unable to set the shebangs in the perl files in ${web.writablehome}/WEB-INF/cgi</echo>
      </else>
    </if>
  </target>

  <target name="configure-web" depends="init,perl-for-building"
    description="Configure only the web app config files">
    <!-- we want a unix path in the global.properties file -->
    <pathconvert targetos="unix" property="src.gsdl3.home.unix">
      <path path="${web.home}"/>
    </pathconvert>
    <pathconvert targetos="unix" property="src.gsdl3.writablehome.unix">
      <path path="${web.writablehome}"/>
    </pathconvert>

    <antcall target="set-perl-shebangs" inheritAll="true" />
	
    <filter token="gsdlhome" value="${gs2build.home}"/>
    <filter token="gsdl3srchome" value="${basedir}"/>
    <filter token="gsdl3home" value="${src.gsdl3.home.unix}"/>
    <filter token="gsdl3writablehome" value="${src.gsdl3.writablehome.unix}"/>
    <filter token="gsdl3version" value="${app.version}"/>
    <filter token="tomcat.server" value="${tomcat.server}"/>
    <filter token="tomcat.port" value="${tomcat.port}"/>
    <filter token="derbyserver" value="${derby.server}"/>
    <filter token="derbyserver.port" value="${derby.server.port}"/>
    <filter token="perlpath" value="${escaped.perl.path}"/>
    <filter token="disable.collection.building" value="${disable.collection.building}"/>
    <copy file="${basedir}/resources/cgi/gsdl3site.cfg" tofile="${web.writablehome}/WEB-INF/cgi/gsdl3site.cfg" filtering="true" overwrite="true"/>
    <copy file="${basedir}/resources/web/global.properties" tofile="${web.writableclasses}/global.properties" filtering="true" overwrite="true"/>
    <copy file="${basedir}/resources/web/log4j.properties" tofile="${web.writableclasses}/log4j.properties" filtering="true" overwrite="true"/>
    <if><bool><istrue value="${gsdl3home.isreadonly}"/></bool>
      <!-- uncomment the writablehome properties -->
      <rsr verbosity="1" file="${web.writableclasses}/global.properties" pattern="^#gsdl3\.(writable{1})?home" replacement="gsdl3.$1home" />
    </if>
    <chmod file="${web.writableclasses}/global.properties" perm="644"/>
    <chmod file="${web.writableclasses}/log4j.properties" perm="644"/>
  </target>

  <target name="compile-web" depends="init">
    <javac srcdir="${web.classes}"
      destdir="${web.classes}"
      includeantruntime="${compile.includeantruntime}"
      debug="${compile.debug}"
      deprecation="${compile.deprecation}"
      optimize="${compile.optimize}"
      encoding="${compile.encoding}">
      <classpath><path refid="compile.classpath"/></classpath>
    </javac>
  </target>

  <target name="compile-classpath-jars" depends="init">
    <if><bool><available file="admin/cp.mf"/></bool>
      <jar destfile="admin/cp.jar" manifest="admin/cp.mf"/>
    </if>
    <if><bool><available file="${lib.java}/cp.mf"/></bool>
      <jar destfile="${lib.java}/cp.jar" manifest="${lib.java}/cp.mf"/>
    </if>
    <if><bool><available file="${lib.jni}/cp.mf"/></bool>
      <jar destfile="${lib.jni}/cp.jar" manifest="${lib.jni}/cp.mf"/>
    </if>
    <if><bool><available file="${web.lib}/cp.mf"/></bool>
      <jar destfile="${web.lib}/cp.jar" manifest="${web.lib}/cp.mf"/>
    </if>
    <jar destfile="cp.jar">
      <manifest>
        <attribute name="Class-Path" value="server.jar admin/cp.jar lib/java/cp.jar lib/jni/cp.jar web/WEB-INF/lib/cp.jar"/>
      </manifest>
    </jar>
  </target>

  <target name="clean-classpath-jars" depends="init">
    <delete file="admin/cp.jar"/>
    <delete file="${lib.java}/cp.jar"/>
    <delete file="${lib.jni}/cp.jar"/>
    <delete file="${web.lib}/cp.jar"/>
    <delete file="cp.jar"/>
  </target>


  <target name="svnupdate-web" unless="nosvn.mode">
    <exec executable="svn">
      <arg value="update"/>
      <arg value="${web.writablehome}"/>
      <arg value="-r"/><arg value="${branch.revision}"/>
    </exec>
  </target>

  <target name="update-web" depends="init,svnupdate-web,configure-web"
    description="update only the web stuff (config files)"/>

  <!-- ======================= Tomcat Targets ========================== -->
  
  <!-- this target downloads and installs Tomcat -->
  <!-- we download tomcat (version 7 for Java 1.5 and later, version 5 for Java 1.4 plus the 1.4 compatibility package). -->
  <target name="prepare-tomcat" depends="init,setup-proxy" if="tomcat.islocal"
    description="downloads the appropriate version of Tomcat (Tomcat 5 if using Java 1.4, Tomcat 7 if using Java 1.5 or higher). If you want to change which version of Java you are using between 1.4 and 1.5/7 then you need to run prepare-tomcat">
  <if>
      <bool>
        <not><available file="${packages.home}/tomcat/.flagfile"/></not>
      </bool>

      <!-- check that packages dir is there -->
      <mkdir dir="${packages.home}"/>
      <get src="http://www.greenstone.org/gs3files/${tomcat.version}.zip"
        dest="${packages.home}/${tomcat.version}.zip"
        usetimestamp="true"/>
      <unzip src="${packages.home}/${tomcat.version}.zip" 
        dest="${packages.home}"/>
      
      <!-- If we are using Java 1.4, we'd be using tomcat 5.5 in which case 
      we would need to have the tomcat compat package to work with Java 1.4-->
      <if>
	<bool><equals arg1="1.4" arg2="${ant.java.version}"/></bool>
	<get src="http://www.greenstone.org/gs3files/${tomcat.version}-compat.zip"
	  dest="${packages.home}/${tomcat.version}-compat.zip"
	  usetimestamp="true"/>
	<unzip src="${packages.home}/${tomcat.version}-compat.zip" 
	  dest="${packages.home}"/>
      </if>
      
      <!-- delete any existing tomcat -->
      <delete dir="${packages.home}/tomcat"/>
      <move todir="${packages.home}/tomcat">
        <fileset dir="${packages.home}/${tomcat.version}"/>
      </move>
	  <!--
      <copy file="${basedir}/resources/tomcat/setclasspath.bat"
        tofile="${packages.home}/tomcat/bin/setclasspath.bat"
        overwrite="true"/>
      <copy file="${basedir}/resources/tomcat/setclasspath.sh"
        tofile="${packages.home}/tomcat/bin/setclasspath.sh"
        overwrite="true"/>
	  -->
      <!-- make sure we have execute permission for the .sh files -->
      <chmod dir="${packages.home}/tomcat/bin" perm="ugo+rx" 
        includes="*.sh"/>   

      <echo file="${packages.home}/tomcat/.flagfile">
        the timestamp of this file is the time that tomcat was extracted from the zip files.
        it is used to figure out whether the files need to be refreshed or not in `ant prepare-tomcat`
      </echo>

      <!-- this is not strictly a prepare tomcat thing, but if one changes
      Java, then they need to change tomcat as well, so might as well call 
      it here -->
      <antcall target="configure-java-version"/>
      <else>
        <echo>Tomcat has been prepared, will not prepare</echo>
        <echo>Delete ${packages.home}/tomcat/.flagfile to force refresh</echo>
      </else>

    </if>

  </target>  
  
  <target name="configure-tomcat" depends="init,configure-tomcat-local,configure-tomcat-external"/>
  
  <target name="configure-tomcat-local" depends="init,perl-for-building" if="tomcat.islocal">
    <!-- re-setup the server.xml file -->
    <copy file="${basedir}/resources/tomcat/server_tomcat${tomcat.version.major}.xml"
		tofile="${packages.home}/tomcat/conf/server.xml" overwrite="true">
      <filterset>
        <filter token="port" value="${tomcat.port}"/>
        <filter token="shutdown-port" value="${tomcat.shutdown.port}"/>
      </filterset>
    </copy>

    <!-- set up the solr context -->

    <!-- First work out the IPv4 address for this machine -->
    <exec executable="${basedir}/bin/script/IPv4.sh" os="${os.unix}" failonerror="false" outputproperty="ipv4.val">
      <arg value="-format-for-tomcat-context"/>
    </exec>
    <exec executable="${basedir}/bin/script/IPv4.bat" osfamily="windows" failonerror="false" outputproperty="ipv4.val">
      <arg value="-format-for-tomcat-context"/>
    </exec>

    <copy file="${basedir}/ext/solr/solr-tomcat-context.xml.in" tofile="${packages.home}/tomcat/conf/Catalina/localhost/solr.xml" overwrite="true">
      <filterset>
        <filter token="gsdl3webhome" value="${web.writablehome}"/>
	<filter token="tomcathome" value="${basedir}/packages/tomcat"/>
	<filter token="IPv4" value="${ipv4.val}"/>
      </filterset>
    </copy>

    <!-- set up the greenstone3 context, it may have a custom name specified in build.properties -->
	<if><bool><not><equals arg1="greenstone3" arg2="${custom.context}"></equals></not></bool>
		<copy file="${basedir}/resources/tomcat/greenstone3.xml" tofile="${basedir}/resources/tomcat/${custom.context}.xml" overwrite="true"/>
	</if>
    <copy file="${basedir}/resources/tomcat/${custom.context}.xml" tofile="${packages.home}/tomcat/conf/Catalina/localhost/${custom.context}.xml" overwrite="true">
      <filterset>
        <filter token="gsdl3webhome" value="${web.home}"/>
        <filter token="gsdl3webwritablehome" value="${web.writablehome}"/>
	<filter token="privilegedattribute" value="${privileged.attribute}"/>
	<filter token="allowedIPs" value="${allowed.IPs}"/>
	<filter token="derbyserver" value="${derby.server}"/>
	<filter token="derbyserverport" value="${derby.server.port}"/>
      </filterset>
    </copy>
	<if>
		<bool>
			<and>
				<available file="${packages.home}/tomcat/conf/Catalina/localhost/greenstone3.xml"/>
				<not><equals arg1="greenstone3" arg2="${custom.context}"></equals></not>
			</and>
		</bool>
		<delete file="${packages.home}/tomcat/conf/Catalina/localhost/greenstone3.xml"/>
	</if>
	
    <!-- set up the greenstone3 web.xml file -->
    <copy file="${basedir}/resources/tomcat/web.xml" tofile="${packages.home}/tomcat/conf/web.xml" overwrite="true">
      <filterset>
	<filter token="perlpath" value="${perl.path}"/>
      </filterset>
    </copy>
  </target>
 
  <target name="configure-tomcat-external" depends="init" unless="tomcat.islocal">
    <!-- re-setup the server.xml file -->
    <!-- need to edit the config file, or do we get the user to do this???-->
  </target>

  <target name="configure-solr-ext" depends="init" >
    <!-- re-setup the web/ext/solr/solr.xml file -->
    <copy file="${web.home}/ext/solr/solr.xml.in"
	  tofile="${gsdl3.writablehome}/ext/solr/solr.xml" filtering="true" overwrite="true">
      <filterset>
        <filter token="gsdl3.home" value="${src.gsdl3.home.unix}"/>
        <filter token="gsdl3.writablehome" value="${src.gsdl3.writablehome.unix}"/>
      </filterset>
    </copy>
  </target>
 
  <!-- This target runs tomcat's "bin/catalina.bat(.sh) jpda start" 
       to allow debugging the running GS3 server in Eclipse. See the instructions at 
       http://www.wikijava.org/wiki/Debugging_a_servlet_with_tomcat_and_Eclipse_tutorial
       on how to use this with eclipse
    -->
  <target name="debug-start-tomcat" description="Startup Tomcat for debugger" depends="init" if="tomcat.islocal">
    <property name="tomcat.classpath" refid="local.tomcat.classpath"/>
    <property name="tomcat.path" refid="local.tomcat.path"/>

    <if><bool>
	<isset property="fedora.maxpermsize"/></bool>
      <property name="catalina.opts" value="-Djava.util.prefs.syncInterval=2000000 -DGSDL3HOME=$GSDL3HOME -DGSDLOS=$GSDLOS -DPATH=$PATH -Xmx800M ${readonly.catalina.opts} ${fedora.maxpermsize}"/>
      <else>
	<property name="catalina.opts" value="-Djava.util.prefs.syncInterval=2000000 -DGSDL3HOME=$GSDL3HOME -DGSDLOS=$GSDLOS -DPATH=$PATH -Xmx800M ${readonly.catalina.opts}"/>
      </else>
    </if>

    <echo file="${catalina.home}/bin/setenv.bat">set CLASSPATH=${tomcat.classpath}</echo>
    <echo file="${catalina.home}/bin/setenv.sh">export CLASSPATH=${tomcat.classpath}</echo>
	
    <exec executable="${catalina.home}/bin/catalina.sh" os="${os.unix}" dir="${catalina.home}/bin" spawn="false">
      <arg value="jpda" />
      <arg value="start" />
      <env key="JPDA_ADDRESS" value="8000"/> <!-- for debugging Tomcat in Eclipse -->
      <env key="JPDA_TRANSPORT" value="dt_socket"/> <!-- for debugging Tomcat in Eclipse -->
      <!--<env key="GSDLOS" value="linux"/> do we need this?? -->
      <env key="PATH" path="${tomcat.path}"/>
      <env key="CATALINA_OPTS" value="${catalina.opts}"/>
      <env key="CATALINA_HOME" value="${catalina.home}"/>
      <env key="CLASSPATH" path="${tomcat.classpath}"/>
      <env key="LD_LIBRARY_PATH" path="${env.LD_LIBRARY_PATH}:${lib.jni}"/>
      <env key="DYLD_LIBRARY_PATH" path="${env.DYLD_LIBRARY_PATH}:${lib.jni}:${gdbm.home}/lib"/> <!-- for mac os --> <!-- need gdbm here these days ??-->
      <env key="WNHOME" path="${wn.home}"/>
      <env key="FEDORA_HOME" path="${fedora.home}"/>
    </exec>
    <exec executable="${catalina.home}/bin/catalina.bat" osfamily="windows" dir="${catalina.home}/bin" spawn="true">
      <arg value="jpda" />
      <arg value="start" />
      <env key="JPDA_ADDRESS" value="8000"/> <!-- for debugging Tomcat in Eclipse -->
      <env key="JPDA_TRANSPORT" value="dt_socket"/> <!-- for debugging Tomcat in Eclipse -->
      <env key="GSDLOS" value="windows"/>
      <env key="GSDL3HOME" value="${basedir}"/>
      <env key="Path" path="${tomcat.path}"/>
      <env key="PATH" path="${tomcat.path}"/>
      <env key="CATALINA_OPTS" value="${catalina.opts}"/>
      <env key="CATALINA_HOME" value="${catalina.home}"/>
      <env key="CLASSPATH" path="${tomcat.classpath}"/>
      <env key="FEDORA_HOME" path="${fedora.home}"/>
    </exec>
    <!-- wait for the server to startup in case other targets need it running -->
    <waitfor maxwait="5" maxwaitunit="second">
      <and>
        <socket server="${tomcat.server}" port="${tomcat.port}"/>
        <http url="http://${tomcat.server}:${tomcat.port}${app.path}/index.html"/>
      </and>
    </waitfor>
  </target>  
  
  <target name="start-tomcat" description="Startup only Tomcat" depends="check-tomcat-started">

    <if><bool><istrue value="${tomcat.isstarted}"/></bool>
      <echo>**************************************</echo>
      <echo>A WEB SERVER IS ALREADY RUNNING ON http://${tomcat.server}:${tomcat.port}. NOT STARTING.</echo>
      <echo>**************************************</echo>
      <else>
	<antcall target="force-start-tomcat"/>
      </else>
      </if>
  </target>

  <!-- Another way: http://ptrthomas.wordpress.com/2006/03/25/how-to-start-and-stop-tomcat-from-ant/ -->
  <target name="force-start-tomcat" description="Startup only Tomcat" depends="init" if="tomcat.islocal">

    <property name="tomcat.classpath" refid="local.tomcat.classpath"/>
    <property name="tomcat.path" refid="local.tomcat.path"/>

    <if><bool>
	<isset property="fedora.maxpermsize"/></bool>
      <property name="catalina.opts" value="-Djava.util.prefs.syncInterval=2000000 -DGSDL3HOME=$GSDL3HOME -DGSDLOS=$GSDLOS -DPATH=$PATH -Xmx800M ${readonly.catalina.opts} ${fedora.maxpermsize}"/>
      <else>
	<property name="catalina.opts" value="-Djava.util.prefs.syncInterval=2000000 -DGSDL3HOME=$GSDL3HOME -DGSDLOS=$GSDLOS -DPATH=$PATH -Xmx800M ${readonly.catalina.opts}"/>
      </else>
    </if>

    <echo file="${catalina.home}/bin/setenv.bat">set CLASSPATH=${tomcat.classpath}</echo>
    <echo file="${catalina.home}/bin/setenv.sh">export CLASSPATH=${tomcat.classpath}</echo>

    <!-- using osfamily instead of testing os against os.windows list of recognised windows versions
	 so that future windows versions are included. See http://simonharrer.wordpress.com/tag/osfamily/ 
	Can't use the osfamily test for linux-type machines as a group since osfamily=unix is separate from osfamily=mac,
	see http://ant-contrib.sourceforge.net/tasks/tasks/osfamily.html -->

    <exec executable="${catalina.home}/bin/startup.sh" os="${os.unix}" dir="${catalina.home}/bin" spawn="false">
      <!--<env key="GSDLOS" value="linux"/> do we need this?? -->
      <env key="GSDL3HOME" value="${basedir}"/>
      <env key="PATH" path="${tomcat.path}"/>
      <env key="CATALINA_OPTS" value="${catalina.opts}"/>
      <env key="CATALINA_HOME" value="${catalina.home}"/>
      <env key="CLASSPATH" path="${tomcat.classpath}"/>
      <env key="LD_LIBRARY_PATH" path="${env.LD_LIBRARY_PATH}:${lib.jni}"/>
      <env key="DYLD_LIBRARY_PATH" path="${env.DYLD_LIBRARY_PATH}:${lib.jni}:${gdbm.home}/lib"/> <!-- for mac os --> <!-- need gdbm here these days ??-->
      <env key="WNHOME" path="${wn.home}"/>
      <env key="FEDORA_HOME" path="${fedora.home}"/>
    </exec>
    <exec executable="${catalina.home}/bin/startup.bat" osfamily="windows" dir="${catalina.home}/bin" spawn="true">
      <env key="GSDLOS" value="windows"/>
      <env key="GSDL3HOME" value="${basedir}"/>
      <env key="Path" path="${tomcat.path}"/>
      <env key="PATH" path="${tomcat.path}"/>
      <env key="CATALINA_OPTS" value="${catalina.opts}"/>
      <env key="CATALINA_HOME" value="${catalina.home}"/>
      <env key="CLASSPATH" path="${tomcat.classpath}"/>
      <env key="FEDORA_HOME" path="${fedora.home}"/>
    </exec>
    <!-- wait for the server to startup in case other targets need it running -->
    <waitfor maxwait="5" maxwaitunit="second">
      <and>
        <socket server="${tomcat.server}" port="${tomcat.port}"/>
        <http url="http://${tomcat.server}:${tomcat.port}${app.path}/index.html"/>
      </and>
    </waitfor>

  </target>

  <!--ant task http: http://www.jajakarta.org/ant/ant-1.6.1/docs/ja/manual/api/org/apache/tools/ant/taskdefs/condition/Http.html-->
  <target name="reconfigure" description="Reconfigure the message router">
    <waitfor maxwait="5" maxwaitunit="second">
      <http url="http://${tomcat.server}:${tomcat.port}${app.path}${server.default.servlet}?a=s&amp;sa=c"/>
    </waitfor>
  </target>

  <!--Command-line args to Ant: http://www.jguru.com/faq/view.jsp?EID=471794-->
  <target name="reconfigure-collection" description="Reconfigure the collection">
    <waitfor maxwait="5" maxwaitunit="second">
      <http url="http://${tomcat.server}:${tomcat.port}${app.path}${server.default.servlet}?a=s&amp;sa=c&amp;sc=${collection}"/>
    </waitfor>
  </target>

  <!-- windows: do we want to launch a webrowser?? -->
  <!-- shouldn't this test whether anything is running first? 
       It's safer to always attempt to stop tomcat: that way we won't be dependent on the right time 
       to check whether the server is stopped or still running before attempting to start again.
       This target, which was recently called force-stop-tomcat for a while but is back to being 
       called stop-tomcat, now hides the Java exception output that appears whenever tomcat is already 
       stopped as happens when stop-tomcat is called consecutively. -->
  <target name="force-stop-tomcat" description="Shutdown only Tomcat" depends="init" if="tomcat.islocal">
    <exec executable="${catalina.home}/bin/shutdown.sh" os="${os.unix}" dir="${catalina.home}/bin" spawn="false">
      <env key="FEDORA_HOME" path="${fedora.home}"/>
      <env key="CATALINA_HOME" value="${catalina.home}"/>
      <arg line=">/dev/null 2>&amp;1"/>
    </exec>
    <exec executable="${catalina.home}/bin/shutdown.bat" osfamily="windows" dir="${catalina.home}/bin" spawn="false">
      <env key="FEDORA_HOME" path="${fedora.home}"/>
      <env key="CATALINA_HOME" value="${catalina.home}"/>
      <arg line=">nul 2>&amp;1"/>
    </exec>    
  </target>

  <!-- Can also try the "socket" condition in place of the "http" condition 
       And also use a <waitfor> in place of <condition>, such as:
       <waitfor maxwait="5" maxwaitunit="second" timeoutproperty="tomcat.isstopped"><http url="..."/></waitfor>
       The http URL resolves to host:port/greenstone3 
       Condition uses <http/> rather than <socket/> for testing, since if the server was stopped, the socket 
       might still be in use for some moments. We test the URL with the http condition since it's likelier to
       fail sooner if the server has indeed been stopped. -->
  <target name="check-tomcat-running">
    <condition property="tomcat.isrunning">
      <!--<http url="http://${tomcat.server}:${tomcat.port}${app.path}"/>-->
      <http url="http://${tomcat.server}:${tomcat.port}"/>
    </condition>
  </target>
  
  <!-- Need a copy of the check-tomcat-running target with a distinct property, because ant restart runs 
       both stop and start, both of which need to do tomcat checks. Each property can be set only once during 
       an invocation with ant. So ant restart will need two properties to store each of the tomcat checks -->
  <target name="check-tomcat-started">
    <condition property="tomcat.isstarted">
      <http url="http://${tomcat.server}:${tomcat.port}"/>
    </condition>
  </target>



  <!-- stop-tomcat checks if the tomcat server is already running. If it appears to be running
       (regardless of whether tomcat was just starting to shut down), this target calls force-stop-tomcat
       to issue the shutdown command to tomcat. Then it waits for at most 15 seconds for the server to 
       actually stop by checking the socket at which tomcat listens every second, printing a warning
       at the end of the max wait time of 15 seconds if tomcat was still running. -->
  <target name="stop-tomcat" description="Shutdown only Tomcat if running" depends="check-tomcat-running" if="tomcat.isrunning">
     <antcall target="force-stop-tomcat"/>

     <property name="wait.numchecks" value="15"/>
     <echo>Waiting for the server to shutdown... (${wait.numchecks} seconds max)</echo>
     <waitfor maxwait="${wait.numchecks}" maxwaitunit="second" checkevery="1" checkeveryunit="second" timeoutproperty="tomcat.timedout">
       <not><socket server="${tomcat.server}" port="${tomcat.port}"/></not>
     </waitfor>
     
     <if>
       <bool>
	 <isset property="${tomcat.timedout}"/>
       </bool>
       <property name="tomcat.isrunning" value="true"/>
       <echo>WARNING: Checked the socket ${wait.numchecks} times, but port ${tomcat.port} is still busy.</echo>
       <else>
	 <echo>Tomcat is stopped.</echo>
	 <property name="tomcat.isrunning" value="false"/>
       </else>
     </if>
  </target>

  <target name="restart-tomcat" description="Shutdown and restart only Tomcat" depends="init,stop-tomcat,force-start-tomcat"/>

  <target name="setup-catalina-ant-tasks">
    <!-- Configure the custom Ant tasks for the Tomcat Manager application -->
    <taskdef name="deploy"    classname="org.apache.catalina.ant.DeployTask"
      classpath="${catalina.home}/server/lib/catalina-ant.jar"/>
    <taskdef name="list"      classname="org.apache.catalina.ant.ListTask"
      classpath="${catalina.home}/server/lib/catalina-ant.jar"/>
    <taskdef name="reload"    classname="org.apache.catalina.ant.ReloadTask"
      classpath="${catalina.home}/server/lib/catalina-ant.jar"/>
    <taskdef name="resources" classname="org.apache.catalina.ant.ResourcesTask"
      classpath="${catalina.home}/server/lib/catalina-ant.jar"/>
    <taskdef name="roles"     classname="org.apache.catalina.ant.RolesTask"
      classpath="${catalina.home}/server/lib/catalina-ant.jar"/>
    <taskdef name="start"     classname="org.apache.catalina.ant.StartTask"
      classpath="${catalina.home}/server/lib/catalina-ant.jar"/>
    <taskdef name="stop"      classname="org.apache.catalina.ant.StopTask"
      classpath="${catalina.home}/server/lib/catalina-ant.jar"/>
    <taskdef name="undeploy"  classname="org.apache.catalina.ant.UndeployTask"
      classpath="${catalina.home}/server/lib/catalina-ant.jar"/>
  </target>

  <!-- http://blog.andrewbeacock.com/2007/11/how-to-truncate-log-file-using-ubuntu.html 
    Doing "cat </dev/null > packages/tomcat/logs/catalina.out" doesn't work as an ant target.
    It seems to have a problem with cat or </dev/null, with or without the < sign. -->
  <target name="reset-logs" description="Empties catalina.out, greenstone.log and contents of web/logs/tmp">
    <echo>Truncating catalina.out, solr.log, greenstone.log and server.log, and emptying ${web.writablehome}/logs/tmp</echo>    
    <exec executable="rm" os="${os.unix}" dir="${catalina.home}/logs" spawn="false">
      <arg value="-f"/>
      <arg value="catalina.out"/>
    </exec>
    <exec executable="rm" os="${os.unix}" dir="${web.writablehome}/logs" spawn="false">
      <arg value="-f"/>
      <arg value="greenstone.log"/>
    </exec>
    <exec executable="rm" os="${os.unix}" dir="${web.writablehome}/logs" spawn="false">
      <arg value="-f"/>
      <arg value="server.log"/>
    </exec>

    <exec executable="touch" os="${os.unix}" dir="${catalina.home}/logs"
    spawn="false">
      <arg value="catalina.out"/>
    </exec>
    <exec executable="touch" os="${os.unix}" dir="${web.writablehome}/logs"
      spawn="false">
      <arg value="greenstone.log"/>
    </exec>
    <exec executable="touch" os="${os.unix}" dir="${web.writablehome}/logs"
      spawn="false">
      <arg value="server.log"/>
    </exec>

    <exec executable="cmd" osfamily="windows" dir="${catalina.home}/logs" spawn="false">
      <arg line="/c echo. > catalina.out"/>
    </exec>
    <exec executable="cmd" osfamily="windows" dir="${web.writablehome}/logs" spawn="false">
      <arg line="/c echo. > greenstone.log"/>
    </exec>
    <exec executable="cmd" osfamily="windows" dir="${web.writablehome}/logs" spawn="false">
      <arg line="/c echo. > server.log"/>
    </exec>

	<!-- if ext/solr/logs/solr.log exists, truncate it -->
	<if><bool><available file="${solr-ext.home}/logs/solr.log" type="file"/></bool>		
		<exec executable="rm" os="${os.unix}" dir="${solr-ext.home}/logs" spawn="false">
		  <arg value="-f"/>
		  <arg value="solr.log"/>
		</exec>	
		<exec executable="touch" os="${os.unix}" dir="${solr-ext.home}/logs" spawn="false">
		  <arg value="solr.log"/>
		</exec>	  
		<exec executable="cmd" osfamily="windows" dir="${solr-ext.home}/logs" spawn="false">
		  <arg line="/c echo. > solr.log"/>
		</exec>
	</if>
	
    <if>
      <bool><available file="${web.writablehome}/logs/tmp" type="dir"/></bool>
      <delete>
	<fileset dir="${web.writablehome}/logs/tmp" includes="**/*"/>
      </delete>
    </if>
  </target>

  <target name="clear-tomcat-sessions" description="Clear the Tomcat Session info." depends="init">
    <exec executable="cmd" osfamily="windows" dir="${catalina.home}/work/Catalina/localhost/greenstone3" spawn="false">
      <arg line="/c echo. > SESSIONS.ser"/>
    </exec>
    <exec executable="rm" os="${os.unix}" dir="${catalina.home}/work/Catalina/localhost/greenstone3" spawn="false">
      <arg value="-f"/>
      <arg value="SESSIONS.ser"/>
    </exec>

  </target>
  <!-- ======================= ant Targets ============================ --> 
  <target name="prepare-ant" depends="init">
    <if>
      <bool>
        <not><available file="${packages.home}/ant/.flagfile"/></not>
      </bool>

      <get src="http://www.greenstone.org/gs3files/apache-ant-1.7.0-bin.zip"
        dest="${packages.home}/apache-ant-1.7.0-bin.zip"
        usetimestamp="true"/>
      <unzip src="${packages.home}/apache-ant-1.7.0-bin.zip"
        dest="${packages.home}"/>
      <move todir="${packages.home}/ant">
        <fileset dir="${packages.home}/apache-ant-1.7.0"/>
      </move>
      <echo file="${packages.home}/ant/.flagfile">
        the timestamp of this file is the time that ant was extracted from the zip files.
        it is used to figure out whether the files need to be refreshed or not in `ant prepare-ant`
      </echo>

      <else>
        <echo>Ant has been prepared, will not prepare</echo>
        <echo>Delete ${packages.home}/ant/.flagfile to force refresh</echo>
      </else>

    </if>
  </target>

  <!-- ======================= Admin Targets ============================ -->  

  <!-- This target won't work with Eclipse because the SecureInputHandler used below conflicts with it. 
    See http://www.dcepler.net/post.cfm/hiding-password-input-in-ant 
    But you can do: echo mypassword | ant config-admin -->
  <target name="config-admin" description="Reset admin password">
    <input addproperty="admin.password" defaultvalue="admin" message="New admin password (3-20 characters):&gt;">
      <handler classname="org.apache.tools.ant.input.SecureInputHandler" /> <!-- password won't be visible on screen -->
    </input>
    <!--<echo>PWD: ${admin.password}</echo>-->
    <antcall target="update-userdb">
      <param name="user.username" value="admin"/>
      <param name="user.password" value="${admin.password}"/>
      <param name="user.groups" value=""/>
      <param name="user.status" value=""/>
      <param name="user.comment" value="Password updated."/>
      <param name="user.email" value=""/>
    </antcall>
  </target>

  <target name="config-user" description="Add or modify users" depends="get-user-data,update-userdb"/>

  <target name="get-user-data" description="Get user details">
    <input addproperty="user.username" message="Username:&gt;"/>
    <input addproperty="user.password" defaultvalue="" message="Password (3-20 characters):&gt;">
      <handler classname="org.apache.tools.ant.input.SecureInputHandler" /> <!-- password won't be visible on screen -->
    </input>
    <input addproperty="user.groups" defaultvalue="" message="Groups (comma-separated list, e.g. personal-collections-editor):&gt;"/>
    <input addproperty="user.status" defaultvalue="true" message="Enabled (true/false):&gt;"/>
    <input addproperty="user.comment" defaultvalue="" message="Comment:&gt;"/>
    <input addproperty="user.email" defaultvalue="" message="Email:&gt;"/>
  </target>

  <!-- This target won't work with Eclipse because the SecureInputHandler used below conflicts with it. 
       See http://www.dcepler.net/post.cfm/hiding-password-input-in-ant 
       But you can do: echo mypassword | ant config-admin -->
  <target name="update-userdb" description="Add or modify users" depends="start-derby">

    <!-- 
       We're now using derby networked server, so stopping and starting tomcat is not necessary.
       For embedded derby: stop tomcat if running, since derby db is embedded 
       and only allows connections from one jvm instance at a time
	 See http://db.apache.org/derby/papers/DerbyTut/embedded_intro.html
	 The ${tomcat.isrunning} property is set by the depends-target "check-tomcat-running" -->
   
    <!-- Need the derby networked server to be running in order to modify the usersDB.
	 The start-derby task will check if derby is already running (if not, ${derby.isstarted} will 
	 be false) and will only start up networked derby if it is not already running. 
	 The ${derby.isstarted} property is set by the depends-target "start-derby", since it won't
	 set the property if called with antcall (like launching in a subshell). Have to use 'depends'.
	 We'll check ${derby.isstarted} at the end to stop derby again if we had to start it up now.-->
    <!--<antcall target="start-derby"/>-->

    <!-- wait a max of 5 seconds for the derbyserver to have started up -->
    <waitfor maxwait="5" maxwaitunit="second">
      <socket server="${derby.server}" port="${derby.server.port}"/>
    </waitfor>

    <!--<echo>${admin.password}</echo>--> <!-- for testing -->
    <echo>gsdl3.writablehome: ${gsdl3.writablehome}</echo> <!-- for testing -->
    <echo>web.home: ${web.home}</echo> <!-- for testing -->
    <java classname="org.greenstone.gsdl3.util.ModifyUsersDB">
      <classpath refid="compile.classpath"/> <!--for ${web.lib}/gsdl3.jar and supporting files-->
      <sysproperty key="gsdl3.writablehome" value="${gsdl3.writablehome}" /> <!-- passes -D<syspropKey=syspropVal> to java class ModifyUsersDB. Available in java code as System.getProperty("syspropKey") -->
      <arg file="${web.home}/etc/usersDB"/>
      <arg value="${user.username}"/>
      <arg value="password=${user.password}"/>
      <arg value="groups=${user.groups}"/>
      <arg value="status=${user.status}"/>
      <arg value="comment=${user.comment}"/>
      <arg value="email=${user.email}"/>
    </java>

    <!-- Need to stop networked derby again if we ran it for this target with the depends=start-derby call. 
	 The test here is for <not>derby.isstarted</not>, as the property would be the same as before 
	 derby was started, since properties are immutable within a single ant command. -->
    <if>
      <bool>
	<not><istrue value="${derby.isstarted}"/></not>
      </bool>
      <antcall target="force-stop-derby"/>
    </if>

  </target>


  <!-- ======================= Axis Targets ============================ -->  
  
  <target name="prepare-axis" depends="init">

    <if>
      <bool>
        <not><available file="${packages.home}/axis/.flagfile"/></not>
      </bool>

      <get src="http://www.greenstone.org/gs3files/${axis.zip.version}"
        dest="${packages.home}/${axis.zip.version}"
        usetimestamp="true"/>
      <unzip src="${packages.home}/${axis.zip.version}"
        dest="${packages.home}"/>
      <move todir="${packages.home}/axis">
        <fileset dir="${packages.home}/${axis.dir.version}"/>
      </move>
      <!-- install axis into greenstone web app -->
      <copy todir="${web.lib}">
        <fileset dir="${packages.home}/axis/webapps/axis/WEB-INF/lib">
          <include name="*.jar"/>
        </fileset>
      </copy>
      <copy todir="${web.home}">
        <fileset dir="${packages.home}/axis/webapps/axis/">
          <include name="*.jsp"/>
          <include name="*.jws"/>
        </fileset>
      </copy>
      <copy tofile="${web.home}/axis.html" file="${packages.home}/axis/webapps/axis/index.html"/>
      <copy todir="${web.classes}">
        <fileset dir="${packages.home}/axis/webapps/axis/WEB-INF/classes">
          <include name="*.properties"/>
        </fileset>
      </copy>
      <echo file="${packages.home}/axis/.flagfile">
        the timestamp of this file is the time that axis was extracted from the zip files.
        it is used to figure out whether the files need to be refreshed or not in `ant prepare-axis`
      </echo>

      <else>
        <echo>Axis has been prepared, will not prepare</echo>
        <echo>Delete ${packages.home}/axis/.flagfile to force refresh</echo>
      </else>

    </if>
  </target>

  <target name="soap-deploy-site" depends="init,get-sitename,get-siteuri,get-webservices,create-deployment-files,deploy-site"
    description="Deploy a SOAP web service for a local Greenstone site. Tomcat must be running for this to work."/>
    
    <target name="deploy-site">
    <java classname="org.apache.axis.client.AdminClient">
      <classpath refid="compile.classpath"/>
      <arg value="-l"/>
      <arg value="http://${tomcat.server}:${tomcat.port}${app.path}/servlet/AxisServlet"/>
      <arg file="${basedir}/resources/soap/deploy.wsdd"/>
    </java>
    <delete file="${basedir}/resources/soap/deploy.wsdd"/> <!--clean up, no longer used-->
  </target>
  
  <target name="soap-undeploy-site" depends="get-undeploy-service-name"
    description="Undeploy a SOAP web service for a local Greenstone site. Tomcat must be running for this to work.">
    <filter token="servicesname" value="${axis.undeploy.servicename}"/>
    <copy file="${basedir}/resources/soap/undeploy-site.wsdd.template"
      tofile="${basedir}/resources/soap/undeploy.wsdd"
      filtering="true"
      overwrite="true"/>
    <java classname="org.apache.axis.client.AdminClient">
      <classpath refid="compile.classpath"/>
      <arg value="-l"/>
      <arg value="http://${tomcat.server}:${tomcat.port}${app.path}/servlet/AxisServlet"/>
      <arg file="${basedir}/resources/soap/undeploy.wsdd"/>
    </java>
    <delete file="${basedir}/resources/soap/undeploy.wsdd"/> <!--clean up, no longer used-->
  </target>  

  <!-- this target used to deploy the default web service SOAPServer (base.webservice.name) on the localsite server
  with the default servicename of localsite-->
  <target name="deploy-localsite" depends="init" 
    description="Deploy the SOAP server for localsite. Will start and stop Tomcat.">
    <antcall target="force-start-tomcat"/>
    <echo>Deploying ${base.webservice.name} web services for localsite under service name: localsite</echo>
    <antcall target="create-deployment-files">
      <param name="axis.sitename" value="localsite"/>
      <param name="axis.servicesname" value="${base.webservice.name}"/>
      <param name="axis.siteuri" value="localsite"/>
    </antcall>
    <antcall target="deploy-site">
      <param name="axis.sitename" value="localsite"/>
      <param name="axis.servicesname" value="${base.webservice.name}"/>
      <param name="axis.siteuri" value="localsite"/>
    </antcall>
    <echo>The Greenstone server has been started up. If you do not want it running, please type: ant stop.</echo>
  </target>
    
  <target name="get-sitename" unless="axis.sitename">
    <input addproperty="axis.sitename" defaultvalue="localsite">What site do you want to deploy services for?
Press Enter for default:localsite</input>
  </target>

  <target name="get-undeploy-service-name" unless="axis.undeploy.servicename">
    <input addproperty="axis.undeploy.servicename" defaultvalue="localsite">Please enter the full name of the service you wish to undeploy.
To find out which web services you've got deployed, point your browser to http://HOST:PORT/greenstone3/services 
Or press Enter for undeploying the default:localsite /&gt;</input>
     <echo>Name of service to undeploy: ${axis.undeploy.servicename}</echo>
  </target>

  <target name="get-webservices" unless="axis.servicesname">
    <input addproperty="axis.servicesname" defaultvalue="${base.webservice.name}">Which set of web services do you want to deploy?
Choose from: ${web.services.list}
Or press Enter for default:${base.webservice.name} /&gt;</input>
    <echo>${axis.servicesname}</echo>
  </target>

  <target name="get-siteuri" depends="get-sitename,get-webservices" unless="axis.siteuri">
    <input addproperty="axis.siteuri" defaultvalue="${axis.servicesname}${axis.sitename}">What name do you want the service to have? (Press Enter for default:${axis.servicesname}${axis.sitename})</input>
    <echo>Site: ${axis.sitename}, services: ${axis.servicesname}, servicesname: ${axis.siteuri}</echo>
  </target>

  <target name="set-soapmethod" description="Determines whether the service in the wsdd should have the style attribute set to message or the provider attribute set to java:RPC"  if="axis.servicesname">
   <condition property="soap.method" value="provider='java:MSG' style='message' use='literal'">
      <equals arg1="${axis.servicesname}" arg2="${base.webservice.name}"/>
    </condition>
   
   <!--everything else defaults to java:RPC at present-->
   <condition property="soap.method" value="provider='java:RPC'">
     <not>
      <equals arg1="${axis.servicesname}" arg2="${base.webservice.name}"/>
    </not>
    </condition>
  </target>
    
  <target name="create-deployment-files" depends="set-soapmethod" if="axis.sitename">
    <filter token="sitename" value="${axis.sitename}"/>
    <filter token="siteuri" value="${axis.siteuri}"/>
    <filter token="servicesname" value="${axis.servicesname}"/>
    <filter token="soapmethod" value="${soap.method}"/>
    <copy file="${basedir}/resources/soap/site.wsdd.template"
      tofile="${basedir}/resources/soap/deploy.wsdd"
      filtering="true"
      overwrite="true"/>
    <!-- create the java files and compile them -->
    <copy file="${basedir}/resources/java/${axis.servicesname}.java.in"
      tofile="${src.gsdl3.home}/${axis.servicesname}${axis.sitename}.java"
      filtering="true"
      overwrite="true"/>
    <mkdir dir="${build.home}"/>
    <javac srcdir="${src.home}"
      destdir="${build.home}" 
      includeantruntime="${compile.includeantruntime}"
      debug="${compile.debug}"
      deprecation="${compile.deprecation}"
      optimize="${compile.optimize}"
      encoding="${compile.encoding}">
      <classpath refid="compile.classpath"/>
      <include name="org/greenstone/gsdl3/${axis.servicesname}${axis.sitename}.java" />
    </javac>
    <mkdir dir="${web.classes}/org/greenstone/gsdl3"/>
    <copy file="${build.home}/org/greenstone/gsdl3/${axis.servicesname}${axis.sitename}.class" 
      tofile="${web.classes}/org/greenstone/gsdl3/${axis.servicesname}${axis.sitename}.class"
      overwrite="true" />
  </target>
  

  <!-- ====================== Core targets ============================== -->
  <!-- core targets refer to the core gsdl3 java src -->
  
  <target name="prepare-core"/>
  
  <target name="configure-core"/>

  <target name="update-core" depends="init,svnupdate-core,clean-core,compile-core"
    description="Update only the Greenstone core" />
  
  <target name="svnupdate-core" unless="nosvn.mode">
    <exec executable="svn">
      <arg value="update"/>
      <arg value="${basedir}"/>
      <arg value="-r"/><arg value="${branch.revision}"/>
    </exec>
  </target>

  <target name="clean-core"
    description="Clean only the Greenstone core">
    <!-- should this delete the gsdl3.jar from web/WEB-INF?? -->
    <delete dir="${build.home}"/>
  </target>

  <target name="compile-core" depends="init" 
    description="Compile only the Greenstone core">
    <mkdir dir="${build.home}"/>
	
    <if><bool><isset property="with.jni"/></bool>
	<javac srcdir="${src.home}"
	       destdir="${build.home}"
	       includeantruntime="${compile.includeantruntime}"
	       debug="${compile.debug}"
	       deprecation="${compile.deprecation}"
	       optimize="${compile.optimize}"
	       encoding="${compile.encoding}">
	  <classpath>
            <path refid="compile.classpath"/>
	  </classpath>
	</javac>
	<else>
	  <property name="gsprefix" value=""/>	  
	  <javac srcdir="${src.home}"
		 destdir="${build.home}"
		 includeantruntime="${compile.includeantruntime}"
		 debug="${compile.debug}"
		 deprecation="${compile.deprecation}"
		 optimize="${compile.optimize}"
		 encoding="${compile.encoding}">
	    <classpath>
              <path refid="compile.classpath"/>
	    </classpath>
	    <exclude name="org/greenstone/gsdl3/service/GS2MGPPRetrieve.java"/>
	    <exclude name="org/greenstone/gsdl3/service/GS2MGPPSearch.java"/>
	    <exclude name="org/greenstone/gsdl3/service/GS2MGSearch.java"/>
	    <exclude name="org/greenstone/gsdl3/service/GS2MGRetrieve.java"/>
	    <exclude name="org/greenstone/gsdl3/service/GoogleNgramMGPPSearch.java"/>
	    <exclude name="org/greenstone/gsdl3/service/PhindPhraseBrowse.java"/>
	    <exclude name="org/greenstone/gsdl3/util/GDBMWrapper.java"/>
	  </javac>
	</else>
    </if>
    <jar destfile="${build.home}/gsdl3.jar">
      <fileset dir="${build.home}">
        <include name="org/greenstone/gsdl3/**"/>
        <include name="org/flax/**"/>
        <exclude name="**/Test.class"/>
      </fileset>
      <manifest>
        <attribute name="Built-By" value="${user.name}" />
      </manifest>
    </jar>
    <copy file="${build.home}/gsdl3.jar" todir="${web.lib}"/>

    <jar destfile="${build.home}/gutil.jar">
      <fileset dir="${build.home}">
        <include name="org/greenstone/util/**"/>
      </fileset>
      <manifest>
        <attribute name="Built-By" value="${user.name}" />
      </manifest>
    </jar>
    <copy file="${build.home}/gutil.jar" todir="${web.lib}"/>

    <!-- copy the localsite server in case we need it -->
    <copy file="${build.home}/org/greenstone/gsdl3/${base.webservice.name}localsite.class" tofile="${web.classes}/org/greenstone/gsdl3/${base.webservice.name}localsite.class" />

    <!-- Greenstone Administrator Interface -->
    <jar destfile="${build.home}/GAI.jar">
      <fileset dir="${build.home}">
        <include name="org/greenstone/admin/**"/>
      </fileset>
      <manifest>
        <attribute name="Built-By" value="${user.name}" />
      </manifest>
    </jar>
    <copy file="${build.home}/GAI.jar" todir="${web.lib}"/>
    <copy file="${build.home}/GAI.jar" todir="${admin.dir}"/>
    <jar destfile="${build.home}/phind.jar">
      <fileset dir="${build.home}">
        <include name="org/greenstone/applet/phind/**"/>
      </fileset>
      <manifest>
        <attribute name="Built-By" value="${user.name}" />
      </manifest>
    </jar>
    <mkdir dir="${web.applet}"/>
    <copy file="${build.home}/phind.jar" todir="${web.applet}"/>
    <!-- phind also needs xercesImpl.jar and xml-apis.jar to be in web/applet -->
    <if>
      <bool><istrue value="${tomcat.islocal}"/></bool>
      <if><bool><available file="${catalina.home}/lib/xercesImpl.jar"/></bool><!-- moved for solr -->
	<copy file="${catalina.home}/lib/xercesImpl.jar" todir="${web.applet}"/>
	<copy file="${catalina.home}/lib/xml-apis.jar" todir="${web.applet}"/>
	
	<else><!-- get from default GS3 web lib location-->
	  <copy file="${web.lib}/xercesImpl.jar" todir="${web.applet}"/>
	  <copy file="${web.lib}/xml-apis.jar" todir="${web.applet}"/>
	</else>
      </if>
    </if>


    <!-- skip anttasks for now
    <jar destfile="${build.home}/anttasks.jar">
      <fileset dir="${build.home}">
        <include name="org/greenstone/anttasks/**"/>
      </fileset>
      <manifest>
        <attribute name="Built-By" value="${user.name}" />
      </manifest>
    </jar>
    <copy file="${build.home}/anttasks.jar" todir="${basedir}/lib/java"/>-->
    <jar destfile="${build.home}/gsdl3test.jar">
      <fileset dir="${build.home}">
        <include name="org/greenstone/gsdl3/**/*Test.class"/>
        <include name="org/greenstone/testing/**"/>
      </fileset>
      <manifest>
        <attribute name="Built-By" value="${user.name}" />
      </manifest>
    </jar>
    <jar destfile="${build.home}/server.jar">
      <fileset dir="${build.home}">
        <include name="org/greenstone/server/**"/>
        <include name="org/greenstone/util/**"/>
      </fileset>
      <fileset file="${basedir}/resources/java/server.properties"/>
      <manifest>
        <attribute name="Built-By" value="${user.name}"/>
      </manifest>
    </jar>
    <copy file="${build.home}/server.jar" todir="${basedir}"/>
  </target>

  <!-- === Eclipse targets == -->
  <target name="setup-for-eclipse">

    <filter token="gsdlhome" value="${gs2build.home}"/>
    <filter token="gsdl3srchome" value="${basedir}"/>
    <filter token="gsdl3home" value="${basedir}/web"/>

    <if>
      <bool><not><available file="${basedir}/TransformingLibrary.launch"/></not></bool>      	
      <copy file="${basedir}/TransformingLibrary.launch.in" tofile="${basedir}/TransformingLibrary.launch" filtering="true" overwrite="true"/>
    </if>
<!--
    <if>
      <bool><not><available file="${basedir}/LibraryCommandline.launch"/></not></bool>      	
      <copy file="${basedir}/LibraryCommandline.launch.in" tofile="${basedir}/LibraryCommandline.launch" filtering="true" overwrite="true"/>
    </if>
-->
  </target>
  
  <!-- ================== Packages targets ================================ -->
  <!-- these targets refer to the greenstone source packages - these need 
  updating less often, so are in  separate targets to the core -->
  <target name="prepare-packages" depends="init"/>
  
  <target name="update-packages" depends="init,svnupdate-packages,configure-packages,clean-packages,compile-packages"
    description="Update only the source packages"/>

  <target name="svnupdate-packages" unless="nosvn.mode"> 
    <exec executable="svn">
      <arg value="update"/>
      <arg value="${src.packages.home}"/>
      <arg value="-r"/><arg value="${branch.revision}"/>
    </exec>
  </target>

  
  <target name="configure-packages" depends="init,configure-javagdbm" 
    description="Configure only the packages."/>
  
  <target name="configure-javagdbm" if="with.jni">
    <echo>
      Configuring JavaGDBM
    </echo>
    
    <exec executable="${javagdbm.home}/configure" os="${os.unix}" dir="${javagdbm.home}" failonerror="true">
      <arg value="--prefix=${basedir}"/>
      <arg value="--libdir=${lib.jni}"/>
      <arg value="--with-gdbm=${gdbm.home}"/>
      <arg line="${cross.configure.args}"/>
    </exec>    
  </target>

  <target name="clean-packages" depends="init,clean-javagdbm" description="Clean only the packages"/>

  <target name="clean-javagdbm" depends="init">
    <if><bool><available file="${javagdbm.home}/Makefile"/></bool>
    <exec executable="make" os="${os.unix}"
      dir="${javagdbm.home}" failonerror="true">
      <arg value="clean"/>
    </exec>
    </if>
  </target>
  
  <target name="distclean-packages" depends="init,distclean-javagdbm" description="Distclean only the packages"/>

  <target name="distclean-javagdbm" depends="init">
    <if><bool><available file="${javagdbm.home}/Makefile"/></bool>
    <exec executable="make" os="${os.unix}"
      dir="${javagdbm.home}" failonerror="true">
      <arg value="distclean"/>
    </exec>
    </if>
  </target>
  
  <target name="compile-packages" description="Compile only the source packages">
    <!-- javagdbm -->
    <antcall target="compile-javagdbm"/>
    <!-- Search4j -->
    <antcall target="compile-search4j"/>
  </target>

  <target name="compile-javagdbm" description="Compile JavaGDBM" if="with.jni">
    
    <!-- unix: -->
    <echo>compile javagdbm</echo>
    <exec executable="make" os="${os.unix}" dir="${javagdbm.home}" failonerror="true">
      <arg value="JAVACOPTIONS=-encoding UTF8"/>
    </exec>
    <exec executable="make" os="${os.unix}" dir="${javagdbm.home}" failonerror="true">
      <arg value="install"/>
    </exec>

    <!-- windows: Calling without the "compile" argument first will run winMake.bat with 
         "all" which will then perform both the compile AND link targets in jni/win32.mak 
         (thereby also generating gdbmjava.dll). Then we run the same command with 
         the "install" argument to copy the gdbmjava.dll into the correct location. -->
    <echo>Windows: compile javagdbm</echo>
    <exec executable="${javagdbm.home}/winMake.bat" osfamily="windows" dir="${javagdbm.home}" failonerror="true">	  
      <env key="GSDL3SRCHOME" path="${basedir}"/>
    </exec>
    <exec executable="${javagdbm.home}/winMake.bat" osfamily="windows" dir="${javagdbm.home}" failonerror="true">
      <env key="GSDL3SRCHOME" path="${basedir}"/>
      <arg value="install"/>
    </exec>

    <!-- install the jar file -->
    <echo>Install the javagdbm jar file ${javagdbm.home}/javagdbm.jar ${lib.jni}</echo>
    <copy file="${javagdbm.home}/javagdbm.jar" todir="${lib.jni}"/>
  </target>

  <target name="compile-search4j">

    <!-- windows -->
    <if><bool><istrue value="${current.os.iswindows}"/></bool>
      <exec executable="nmake" dir="${src.packages.home}/search4j" failonerror="true">
        <arg value="/f"/>
        <arg value="win32.mak"/>
        <arg value='BINDIR="${basedir}\bin"'/>
      </exec>
      <exec executable="nmake" dir="${src.packages.home}/search4j" failonerror="true">
        <arg value="/f"/>
        <arg value="win32.mak"/>
        <arg value="install"/>
        <arg value='BINDIR="${basedir}\bin"'/>
      </exec>

    <!-- unix -->
    <else><if><bool><istrue value="${current.os.isunix}"/></bool>
      <exec executable="${src.packages.home}/search4j/configure" dir="${src.packages.home}/search4j" failonerror="true">
        <arg value="--bindir=${basedir}/bin"/>
        <arg value="${static.arg}"/>
        <arg line="${cross.configure.args}"/>
      </exec>
      <exec executable="make" dir="${src.packages.home}/search4j" failonerror="true"/>
      <exec executable="make" dir="${src.packages.home}/search4j" failonerror="true">
        <arg value="install"/>
      </exec>

    <!-- else warn -->
    <else>
      <fail>this target does not support the current os</fail>

    </else></if></else></if>

  </target>

  <target name="install-auxiliary-jar-files" depends="init">

    <if>
      <bool><available file="${mg.home}/mg.jar"/></bool>
      <copy file="${mg.home}/mg.jar" todir="${lib.jni}"/>
    </if>

    <if>
      <bool><available file="${mgpp.home}/mgpp.jar"/></bool>
      <copy file="${mgpp.home}/mgpp.jar" todir="${lib.jni}"/>
    </if>

    <copy file="${lucene.home}/LuceneWrapper4.jar" todir="${web.lib}"/>    
  </target>
  
  <target name="install-jni-files" depends="init" if="with.jni">
    <antcall target="install-jni-files-linux"/>
    <antcall target="install-jni-files-windows"/>
    <antcall target="install-jni-files-macos"/>
  </target>

  <target name="install-jni-files-linux" depends="init" if="current.os.isunixnotmac">

    <if>

      <bool><equals arg1="${os.bin.dir}" arg2="windows"/></bool>
      <!-- cross compiling to windows -->
      <copy file="${mg.home}/jni/mgretrievejni.dll" todir="${lib.jni}"/>
      <copy file="${mg.home}/jni/mgsearchjni.dll" todir="${lib.jni}"/>
      <copy file="${mg.home}/jni/mgpassjni.dll" todir="${lib.jni}"/>
      <copy file="${mgpp.home}/jni/mgppretrievejni.dll" todir="${lib.jni}"/>
      <copy file="${mgpp.home}/jni/mgppsearchjni.dll" todir="${lib.jni}"/>
      <copy file="${mgpp.home}/jni/mgpppassjni.dll" todir="${lib.jni}"/>
      
      <else>
	<!-- otherwise do the usual Unix copies -->
	<copy file="${mg.home}/jni/libmgretrievejni.so" todir="${lib.jni}"/>
	<copy file="${mg.home}/jni/libmgsearchjni.so" todir="${lib.jni}"/>
	<copy file="${mg.home}/jni/libmgpassjni.so" todir="${lib.jni}"/>
	<copy file="${mgpp.home}/jni/libmgppretrievejni.so" todir="${lib.jni}"/>
	<copy file="${mgpp.home}/jni/libmgppsearchjni.so" todir="${lib.jni}"/>
	<copy file="${mgpp.home}/jni/libmgpppassjni.so" todir="${lib.jni}"/>
      </else>
    </if>


  </target>
  <target name="install-jni-files-windows" depends="init" if="current.os.iswindows">
    <copy file="${mg.home}/jni/mgretrievejni.dll" todir="${lib.jni}"/>
    <copy file="${mg.home}/jni/mgsearchjni.dll" todir="${lib.jni}"/>
    <copy file="${mg.home}/jni/mgpassjni.dll" todir="${lib.jni}"/>
    <copy file="${mgpp.home}/jni/mgppretrievejni.dll" todir="${lib.jni}"/>
    <copy file="${mgpp.home}/jni/mgppsearchjni.dll" todir="${lib.jni}"/>
    <copy file="${mgpp.home}/jni/mgpppassjni.dll" todir="${lib.jni}"/>
  </target>
  <target name="install-jni-files-macos" depends="init" if="current.os.ismac">
    <copy file="${mg.home}/jni/libmgretrievejni.jnilib" todir="${lib.jni}"/>
    <copy file="${mg.home}/jni/libmgsearchjni.jnilib" todir="${lib.jni}"/>
    <copy file="${mg.home}/jni/libmgpassjni.jnilib" todir="${lib.jni}"/>
    <copy file="${mgpp.home}/jni/libmgppretrievejni.jnilib" todir="${lib.jni}"/>
    <copy file="${mgpp.home}/jni/libmgppsearchjni.jnilib" todir="${lib.jni}"/>
    <copy file="${mgpp.home}/jni/libmgpppassjni.jnilib" todir="${lib.jni}"/>
  </target>
  
  <!-- ========common-src targets =================================-->
  <!-- these are used to get common-src (for indexers, gdbm, sqlite etc) when
  collection building is not enabled -->

  <target name="update-common-src" depends="init" if="collection.building.disabled">
  </target>

  <target name="svnupdate-common-src" depends="init" if="collection.building.disabled" unless="nosvn.mode">
    <exec executable="svn">
      <arg value="update"/>
      <arg value="${common.src.home}"/>
      <arg value="-r"/><arg value="${branch.revision}"/>
    </exec>
  </target>

  <target name="prepare-common-src" depends="init" if="collection.building.disabled" unless="common.src.present">
    <antcall target="checkout-common-src"/>
    <antcall target="unzip-windows-packages"/>
  </target>

  <target name="checkout-common-src" depends="init" if="collection.building.disabled" unless="nosvn.mode">
    <echo>checking out common-src</echo>
    <exec executable="svn">
      <arg value="checkout"/>
      <arg value="${svn.root}/main/${branch.path}/greenstone2/common-src"/>
			<arg value="common-src"/>
      <arg value="-r"/><arg value="${branch.revision}"/>
    </exec>
  </target>
    
  <target name="configure-common-src" depends="init">
<!--
    <echo>cross configure args: ${cross.configure.args}</echo>
-->
    <exec executable="${common.src.home}/configure" os="${os.unix}"
      dir="${common.src.home}" failonerror="true">
      <arg value="--prefix=${gs2build.home}"/> <!-- what value to use?? -->
      <arg value="--bindir=${gs2build.home}/bin/${os.bin.dir}"/> <!-- what value to use?? -->
      <arg line="${gs2.opt.args}"/>
      <arg line="${static.arg}"/>
      <arg line="${cross.configure.args}"/>
      <arg line="${allargs}"/>
    </exec>
  </target>

  <target name="clean-common-src" depends="init">
    <!-- unix:  -->
    <if><bool><available file="${common.src.home}/Makefile"/></bool>
    <exec executable="make" os="${os.unix}" dir="${common.src.home}" failonerror="true">
      <arg value="clean"/>
    </exec>
    </if>
    <!-- windows: -->    
    <exec executable="nmake" dir="${common.src.home}" osfamily="windows" failonerror="true">
      <arg value="/f"/>
      <arg value="win32.mak"/>
      <arg value="clean"/>
      <arg value="GSDLHOME=${gs2build.home}"/>
    </exec>
  </target>
  <target name="distclean-common-src" depends="init">
    <!-- unix:  -->
    <if><bool><available file="${common.src.home}/Makefile"/></bool>
    <exec executable="make" os="${os.unix}" dir="${common.src.home}" failonerror="true">
      <arg value="distclean"/>
    </exec>
    </if>
    <!-- windows: distclean = clean + remove configure products (remove makefiles). But on Windows there is no removing makefiles, so we just call clean -->    
    <exec executable="nmake" dir="${common.src.home}" osfamily="windows" failonerror="true">
      <arg value="/f"/>
      <arg value="win32.mak"/>
      <arg value="clean"/>
      <arg value="GSDLHOME=${gs2build.home}"/>
    </exec>
  </target>
  <target name="compile-common-src" depends="init">
    <!-- unix: -->
    <exec executable="make" os="${os.unix}" dir="${common.src.home}" failonerror="true">
      <arg value="${gs2.compile.target}"/>
    </exec>
    <!-- windows: -->
    <exec executable="nmake" dir="${common.src.home}" osfamily="windows" failonerror="true">
      <arg value="/f"/>
      <arg value="win32.mak"/>
      <arg value="GSDLHOME=${gs2build.home}"/>
      <arg value="ENABLE_JNI=${gs2.windows.enablejni}"/>
      <arg value="ENABLE_MG=${gs2.windows.enablemg}"/>
      <arg value="ENABLE_MGPP=${gs2.windows.enablemgpp}"/>
      <arg value="USE_GDBM=${gs2.windows.usegdbm}"/>
      <arg value="USE_SQLITE=${gs2.windows.usesqlite}"/>
    </exec>
  </target>
  
  <!-- ======= collection-building targets ===========================-->

  <target name="update-collection-building" if="collection.building.enabled" 
    depends="init,svnupdate-collection-building,gs2build-edit-setup-bat,configure-common-src,clean-common-src,compile-common-src,configure-collection-building,clean-collection-building,compile-collection-building"
    description="Update (SVN update, configure, compile etc) only the collection building components"/>

  <target name="svnupdate-collection-building" if="collection.building.enabled" depends="init,svnupdate-gs2build,svnupdate-cgi,svnupdate-gli" unless="nosvn.mode"
    description="SVN update the collection building components">
  </target>

  <target name="prepare-collection-building" depends="init,prepare-gs2build,svnupdate-cgi,prepare-gli" if="collection.building.enabled">
  </target>

  <target name="configure-collection-building" depends="init,configure-build-src" if="collection.building.enabled"
    description="Configure the collection building components">
  </target>

  <target name="clean-collection-building" depends="init,clean-gli,clean-build-src" 
    description="Clean only the collection building components" 
    if="collection.building.enabled"/>

  <target name="distclean-collection-building" depends="init,clean-build-src,distclean-build-src" 
    description="Distclean only the collection building components" 
    if="collection.building.enabled"/>

  <target name="compile-collection-building" depends="init,compile-build-src,compile-gli" if="collection.building.enabled"
    description="Compile only the collection building components">
    <!-- make install for common-src -->
    <!-- unix: -->
    <exec executable="make" os="${os.unix}" dir="${common.src.home}" failonerror="true">
      <arg value="${gs2.install.target}"/>
    </exec>
      
    <!-- windows: -->
    <exec executable="nmake" dir="${common.src.home}" osfamily="windows" failonerror="true">
      <arg value="/f"/>
      <arg value="win32.mak"/>
      <arg value="install"/>
	  <arg value="GSDLHOME=${gs2build.home}"/>
      <arg value="ENABLE_JNI=${gs2.windows.enablejni}"/>
      <arg value="ENABLE_MG=${gs2.windows.enablemg}"/>
      <arg value="ENABLE_MGPP=${gs2.windows.enablemgpp}"/>
      <arg value="USE_GDBM=${gs2.windows.usegdbm}"/>
      <arg value="USE_SQLITE=${gs2.windows.usesqlite}"/>
	  <!--
      <arg value="ENABLE_JNI=${gs2.windows.enablejni}"/>
      <arg value="USE_SQLITE=0"/>--> <!-- why is this not on by default? -->
    </exec>

    <!-- install gs2build indexers for windows -->
      <if>
	<bool><istrue value="${current.os.iswindows}"/></bool> 
	<copy todir="${gs2build.home}/bin/windows">
	  <fileset dir="${gs2build.home}/common-src/indexers/bin">
	    <include name="*.*"/>
	  </fileset>
	</copy>
      </if>

    <!-- LuceneWrapper jar file not installed by default -->
    <mkdir dir="${gs2build.home}/bin/java"/>
    <copy file="${lucene.home}/LuceneWrapper4.jar" todir="${gs2build.home}/bin/java"/>

  </target>

  <!-- ============== gli targets ================================= -->
  
  <!-- gliserver.pl, gsdlCGI.pm, metadata-server.pl and checksum.pl are updated alongside 
       this in target svnupdate-collection-building -->
  <target name="svnupdate-gli" if="collection.building.enabled" depends="init" unless="nosvn.mode">

    <exec executable="svn">
      <arg value="update"/>
      <arg value="${gli.home}"/>
      <arg value="-r"/><arg value="${branch.revision}"/>
    </exec>

  </target>

  <!-- gliserver.pl, gsdlCGI.pm, metadata-server.pl and checksum.pl are updated 
       alongside this prepare-gli target in target prepare-collection-building -->
  <target name="prepare-gli" depends="init" if="collection.building.enabled" unless="gli.present">
    <!-- checkout -->
    <if><bool><and><not><istrue value="${nosvn.mode}"/></not><isset property="with.gli.and.gems"/></and></bool>

    <exec executable="svn">
      <arg value="checkout"/>
      <arg value="${svn.root}/main/${branch.path}/gli"/>
      <arg value="-r"/><arg value="${branch.revision}"/>
    </exec>

    </if>
  </target>

  <!-- svn checkout gliserver.pl, gsdlCGI.pm for gli applet, as well as gsdlCGI.pm-dependent metadata-server.pl 
       (checksum.pl is used by GS2 for depositdspace.dm and may eventually be used by GS3 too) -->
  <target name="svnupdate-cgi">

    <exec executable="svn" dir="web/WEB-INF/cgi">
      <arg value="export"/>
      <arg value="-r"/><arg value="${branch.revision}"/>
      <arg value="${svn.root}/main/${branch.path}/greenstone2/common-src/cgi-bin/gliserver.pl"/>
    </exec>
    <exec executable="svn" dir="web/WEB-INF/cgi">
      <arg value="export"/>
      <arg value="-r"/><arg value="${branch.revision}"/>
      <arg value="${svn.root}/main/${branch.path}/greenstone2/common-src/cgi-bin/gsdlCGI.pm"/>
    </exec>
    <exec executable="svn" dir="web/WEB-INF/cgi">
      <arg value="export"/>
      <arg value="-r"/><arg value="${branch.revision}"/>
      <arg value="${svn.root}/main/${branch.path}/greenstone2/common-src/cgi-bin/metadata-server.pl"/>
    </exec>
    <exec executable="svn" dir="web/WEB-INF/cgi">
      <arg value="export"/>
      <arg value="-r"/><arg value="${branch.revision}"/>
      <arg value="${svn.root}/main/${branch.path}/greenstone2/common-src/cgi-bin/checksum.pl"/>
    </exec>
  </target>

  
  <target name="clean-gli" depends="init" if="collection.building.enabled">
    <!-- gli -->
    <property name="gli.home" value="${basedir}/gli"/>
    <!-- linux -->
    <exec executable="clean.sh" os="${os.unix}" dir="${gli.home}"
      resolveExecutable="true" failonerror="true"/>
    <!-- windows -->
    <exec executable="clean.bat" osfamily="windows" dir="${gli.home}"
      resolveExecutable="true" failonerror="true"/>
  </target>
 
  <target name="compile-gli" depends="init" if="collection.building.enabled">
    <if><bool><isset property="with.gli.and.gems"/></bool>
      <!-- gli -->
      <property name="gli.home" value="${basedir}/gli"/>

      <!-- linux -->
      <exec executable="makegli.sh" os="${os.unix}" dir="${gli.home}" resolveExecutable="true" failonerror="true"/>
      <!--remote gli-->
      <exec executable="makejar.sh" os="${os.unix}" dir="${gli.home}"
	    resolveExecutable="true" failonerror="true"/>
      <!-- windows -->
      <exec executable="makegli.bat" osfamily="windows" dir="${gli.home}" resolveExecutable="true" failonerror="true"/>
      <!--remote gli-->
      <exec executable="makejar.bat" osfamily="windows" dir="${gli.home}"
	    resolveExecutable="true" failonerror="true"/> 
      <copy file="${gli.home}/GLIServer.jar" todir="${gs2build.home}/bin/java" />
    </if>
  </target>

  <target name="gli" description="Run the Greenstone Librarian Interface" depends="init" if="collection.building.enabled">
    <exec executable="${basedir}/gli/gli.sh" os="${os.linux},${os.solaris}" dir="${basedir}/gli" spawn="true">
      <env key="gsdl3path" path="${basedir}"/>
      <env key="gsdlpath" path="${gs2build.home}"/>
    </exec>
    <exec executable="${basedir}/gli/gli.sh" os="${os.mac}" dir="${basedir}/gli" spawn="true">
      <env key="gsdl3path" path="${basedir}"/>
      <env key="gsdlpath" path="${gs2build.home}"/>
      <env key="DYLD_LIBRARY_PATH" path="${env.DYLD_LIBRARY_PATH}:${gdbm.home}/lib"/>
    </exec>
    <exec executable="${basedir}/gli/gli.bat" osfamily="windows" dir="${basedir}/gli" spawn="true">
      <env key="GSDL3PATH" path="${basedir}"/>
      <env key="GSDLPATH" path="${gs2build.home}"/>
    </exec>
    <echo>Running GLI from Ant means that you don't get to see any of the terminal output. If you have problems with GLI and want to see the output, please run the script gli.sh/bat from the greenstone3/gli directory.
    </echo>
  </target>

  <!-- ================ gs2build targets =========================== -->

  <target name="svnupdate-gs2build" if="collection.building.enabled" depends="init" unless="nosvn.mode">
    <echo>svn updating gs2build</echo>
    <exec executable="svn">
      <arg value="update"/>
      <arg value="${gs2build.home}"/>
      <arg value="-r"/><arg value="${branch.revision}"/>
    </exec>
  </target>
    
  <target name="prepare-gs2build" depends="init" if="collection.building.enabled" unless="gs2build.present">
    <antcall target="checkout-gs2build"/>
    <antcall target="prepare-pdfbox"/>
    <antcall target="prepare-imagemagick"/> <!-- has to be done before calling prepare-gnome-lib -->
    <antcall target="prepare-gnome-lib"/>
    <antcall target="unzip-windows-packages"/>
    <antcall target="checkout-winbin"/>
    <antcall target="get-windows-binaries"/>
    <antcall target="delete-winbin"/>
  </target>

  <target name="checkout-gs2build" depends="init" if="collection.building.enabled" unless="nosvn.mode">
    <echo>checking out gs2build</echo>
    <exec executable="svn">
      <arg value="checkout"/>
      <arg value="${svn.root}/main/${branch.path}/gs2build"/>
      <arg value="-r"/><arg value="${branch.revision}"/>
    </exec>
  </target>

  <!-- Gets the PDFBox extension into gs2build/ext if checkout.pdfbox.ext is set to true in build.properties 
       (which it is by default) -->
  <target name="prepare-pdfbox" depends="init" if="collection.building.enabled">
    <if>
      <bool>
	<istrue value="${checkout.pdfbox.ext}"/>
      </bool>
      
      <property name="pdfbox.ext.dir" value="${gs2build.home}/ext/pdf-box"/>
      <condition property="pdfbox.ext.present">
	<available file="${pdfbox.ext.dir}" type="dir" />
      </condition>
      
      <!-- get the pdfbox tar.gz file if we don't already have it and extract it if there's no pdf-box directory in gs2build/ext-->
      <if>
	<bool>
	  <not><istrue value="${pdfbox.ext.present}"/></not>
	</bool>

	<if>
	  <bool>
	    <not><istrue value="${gs2build.home}/ext/pdf-box-java.tar.gz"/></not>
	  </bool>

	  <echo>Checking out the PDFBox extension into the GSDLHOME extension area</echo>
	  <exec executable="svn">
	    <arg value="export"/>
	    <arg value="${svn.root}/gs2-extensions/pdf-box/trunk/pdf-box-java.tar.gz"/>
	    <arg value="${gs2build.home}/ext/pdf-box-java.tar.gz"/>
	  </exec>
	</if>	

	<echo>Extacting the PDFBox extension into the GSDLHOME extension area</echo>
	<untar compression="gzip" 
	       src="${gs2build.home}/ext/pdf-box-java.tar.gz"
	       dest="${gs2build.home}/ext"/>

	<delete file="${gs2build.home}/ext/pdf-box-java.tar.gz"/>

	<else>
	  <echo>The PDFBox extension already exists at ${pdfbox.ext.dir}</echo>
	</else>	
      </if>

      <else>
	<echo>**** Not preparing the PDFBox extension:</echo>
	<echo>The property checkout.pdfbox.ext in build.properties was not set or was set to false</echo>
      </else>
    </if>
  </target>

  <target name="prepare-imagemagick" depends="init" if="collection.building.enabled">
    <if>
      <bool>
	<istrue value="${checkout.imagemagick.ext}"/>
      </bool>

      <antcall target="checkout-imagemagick"/>
      <!--Compilation of imagemagick now happens during ant install, still before configuring the src code, as before -->

      <else>
	<echo>**** Not preparing imagemagick:</echo>
	<echo>property checkout.imagemagick.ext in build.properties was not set or was set to false</echo>
      </else>
    </if>
  </target>

  <target name="checkout-imagemagick" depends="init" if="collection.building.enabled" unless="nosvn.mode">
    
    <property name="imagemagick.src.dir" value="${gs2build.home}/ext/imagemagick"/>
    <condition property="imagemagick.src.present">
      <available file="${imagemagick.src.dir}" type="dir" />
    </condition>

    <if>
      <bool>
	<not><istrue value="${imagemagick.src.present}"/></not>
      </bool>
      
      <echo>checking out imagemagick source into the extension area</echo>

      <exec executable="svn">
	<arg value="checkout"/>
	<arg value="${svn.root}/gs2-extensions/imagemagick/trunk/src"/>
	<arg value="${imagemagick.src.dir}"/>
      </exec>

      <else>
	<echo>imagemagick source code already exists at ${imagemagick.src.dir}</echo>
      </else>
    </if>
  </target>

 <!-- Compile up imagemagick src folder if: the checkout.imagemagick.ext flag is turned on, if the imagick source code exists and if hasn't already been compiled up, then compile it up. Later can check if a gs-specific binary version has been installed already, in which case compilation won't be necessary. -->
  <target name="compile-imagemagick" if="checkout.imagemagick.ext">
    
    <property name="imagemagick.src.dir" value="${gs2build.home}/ext/imagemagick"/>
    <property name="imagemagick.compiled.dir" value="${gs2build.home}/ext/imagemagick/${os.bin.dir}"/>

    <condition property="imagemagick.src.present.firstcheck">
      <available file="${imagemagick.src.dir}" type="dir" />
    </condition>
    <condition property="imagemagick.compiled.present">
      <available file="${imagemagick.compiled.dir}" type="dir"/>
    </condition>
    <!--<condition property="imagemagick.bin.present">
      <available file="${basedir}/wherever/the/imgmagick/binary/is/to/be/found" type="dir" />
    </condition>-->

    <!-- imagemagick will only be checked out if the user set the checkout.imagemagick.ext in build.properties -->
    <if>
      <bool>
	<isfalse value="${imagemagick.src.present.firstcheck}"/>
      </bool>
      <antcall target="checkout-imagemagick"/>
    </if>

    <!-- keep track of whether the imagemagick src is now indeed present. Need to know this for a subsequent test -->
    <condition property="imagemagick.src.present">
      <available file="${imagemagick.src.dir}" type="dir" />
    </condition>

    <if>
      <bool>
	<and>
	  <istrue value="${imagemagick.src.present}"/> <!-- imagemagick src code is present -->
	  <isfalse value="${imagemagick.compiled.present}"/> <!-- imagemagick src not compiled yet, so no imagemagick/os subfolder yet -->
	</and>
      </bool>
      <!-- then compile it. Only necessary for mac/linux, since windows has a stable working binary of imagemagick -->
      <exec executable="/bin/bash" dir="${imagemagick.src.dir}" failonerror="true">
        <arg value="CASCADE-MAKE.sh"/>
      </exec>  
    </if>
  </target>


  <!-- Compile up gnome-lib src folder if: checkout.gnomelib.ext is turned on, and if not using the binary
       version (gnome-lib-minimal), and if the gnome-lib src folder is not already compiled up. -->
  <target name="compile-gnome-lib" if="checkout.gnomelib.ext">

    <!-- http://stackoverflow.com/questions/3290307/sourcing-a-shell-profile-in-an-ant-build-file 
	 TODO: CASCADE-MAKE already sources devel.bash, but we still want to source it more globally, 
	 so that the rest of the GS3 compilation process also has access to those env variables -->
    
    <property name="gnome.lib.src.dir" value="${basedir}/gs2build/ext/gnome-lib"/>
    <property name="gnome.lib.compiled.dir" value="${basedir}/gs2build/ext/gnome-lib/${os.bin.dir}"/>

    <condition property="gnome.src.lib.present.firstcheck" value="true" else="false">
      <available file="${gnome.lib.src.dir}" type="dir" />
    </condition>
    <condition property="gnome.compiled.lib.present" value="true" else="false">
      <available file="${gnome.lib.compiled.dir}" type="dir"/>
    </condition>
    <condition property="gnome.lib.min.present" value="true" else="false">
      <available file="${basedir}/gs2build/ext/gnome-lib-minimal" type="dir" />
    </condition>

    <!-- Make sure to checkout gnome-lib if it was not checked out at this stage 
	 since we're instructed to do so in th pre-condition to this target -->
    <if>
      <bool>
	<and>
	  <isfalse value="${gnome.lib.min.present}"/>
	  <isfalse value="${gnome.src.lib.present.firstcheck}"/>
	</and>
      </bool>
      <antcall target="checkout-gnome-lib"/>
    </if>

    <!-- Keep track of whether we have the gnome-lib src folder now. Need to know this for a subsequent test -->
    <condition property="gnome.src.lib.present" value="true" else="false">
      <available file="${gnome.lib.src.dir}" type="dir" />
    </condition>

    <!--<echo>MIN: ${gnome.lib.min.present}
      SRC LIB: ${gnome.src.lib.present}
      COMPILED: ${gnome.compiled.lib.present}</echo>-->

    <if>
      <bool>
	<and>
	  <isfalse value="${gnome.lib.min.present}"/> <!-- no gnome-lib-minimal binary present -->
	  <istrue value="${gnome.src.lib.present}"/> <!-- gnome-lib folder for compilation is present-->
	  <isfalse value="${gnome.compiled.lib.present}"/> <!-- gnome-lib not yet compiled, so no gnome-lib/os subfolder yet -->
	</and>
      </bool>

      <!-- then compile it. Only necessary for mac/linux, since windows doesn't need gnome lib -->
      <exec executable="/bin/bash" dir="${gnome.lib.src.dir}" failonerror="true">
        <arg value="CASCADE-MAKE.sh"/>
      </exec>  
    </if>
  </target>


  <target name="prepare-gnome-lib" depends="init" if="collection.building.enabled" unless="gnome-lib.present">
    <if>
      <bool>
	<istrue value="${checkout.gnomelib.ext}"/>
      </bool>

      <antcall target="checkout-gnome-lib"/>
      <!--Compilation of gnome-lib happens during ant install, just before configuring (common-src and) build-src-->

      <else>
	<echo>**** Not preparing gnome-lib:</echo>
	<echo>property checkout.gnomelib.ext in build.properties was not set or was set to false</echo>
      </else>
    </if>
  </target>


  <target name="checkout-gnome-lib" depends="init" if="collection.building.enabled" unless="nosvn.mode">

    <property name="gnomelib.src.dir" value="${basedir}/gs2build/ext/gnome-lib"/>
    <condition property="gnome.src.present">
      <available file="${gnomelib.src.dir}" type="dir" />
    </condition>

    <if>
      <bool>
	<not><istrue value="${gnome.src.present}"/></not>
      </bool>

      <echo>checking out gnome-lib extension</echo>
      <exec executable="svn">
	<arg value="checkout"/>
	<arg value="${svn.root}/gs2-extensions/gnome-lib/trunk/src"/>
	<arg value="${gs2build.home}/ext/gnome-lib"/>
      </exec>

      <else>
	<echo>gnomelib source code already exists at ${gnomelib.src.dir}</echo>
      </else>
    </if>

  </target>

  <target name="checkout-winbin" depends="init" if="current.os.iswindows" 
    unless="nosvn.mode">

    <exec executable="svn">
      <arg value="checkout"/>
      <arg value="${svn.root}/main/${branch.path}/binaries/windows"/>
      <arg value="-r"/><arg value="${branch.revision}"/>
      <arg value="winbin"/>
    </exec>

  </target>

  <target name="update-winbin" depends="init" if="current.os.iswindows" unless="nosvn.mode">
    <exec executable="svn">
      <arg value="update"/>
      <arg value="winbin"/>
      <arg value="-r"/><arg value="${branch.revision}"/>
    </exec>

  </target>
  
  <target name="get-windows-binaries" depends="init" if="collection.building.enabled.windows">
    <move todir="${gs2build.home}/bin/windows" failonerror="false">
      <fileset dir="${basedir}/winbin/bin"/>
    </move>
  </target>

  <target name="delete-winbin" depends="init" if="collection.building.enabled.windows">
    <delete dir="${basedir}/winbin"/>
  </target>
  
  <target name="unzip-windows-packages" depends="init" if="current.os.iswindows">  
    <unzip src="${common.src.home}/packages/windows/crypt/crypt.zip"
      dest="${common.src.home}/packages/windows/crypt"/>
    <untar compression="gzip" 
      src="${common.src.home}/packages/sqlite/${sqlite.targz.version}"
      dest="${common.src.home}/packages/sqlite"/>
    <unzip src="${common.src.home}/indexers/packages/windows/iconv/iconv.zip"
      dest="${common.src.home}/indexers/packages/windows/iconv"/>
  </target>
    
  <target name="gs2build-edit-setup-bat" if="collection.building.enabled.windows">
    <!-- we want a windows path in the setup.bat file -->
    <pathconvert targetos="windows" property="gs2build.home.windows">
      <path path="${gs2build.home}"/>
    </pathconvert>
    <move file="${gs2build.home}/setup.bat" tofile="${gs2build.home}/setup-tmp.bat">
      <filterset>
        <filter token="gsdlhome" value="${gs2build.home.windows}"/>
      </filterset>
    </move>  
    <move file="${gs2build.home}/setup-tmp.bat" tofile="${gs2build.home}/setup.bat" />
  </target>
  
 
  <target name="clean-build-src" depends="init" if="collection.building.enabled">
    <!-- unix:  -->
    <if><bool><available file="${build.src.home}/Makefile"/></bool>
    <exec executable="make" os="${os.unix}" dir="${build.src.home}" failonerror="true">
      <arg value="clean"/>
    </exec>
    </if>
    <!-- windows: -->    
    <exec executable="nmake" dir="${build.src.home}" osfamily="windows" failonerror="true">
      <arg value="/f"/>
      <arg value="win32.mak"/>
      <arg value="clean"/>
      <arg value="GSDLHOME=${gs2build.home}"/>
    </exec>
  </target>
  
  
  <target name="distclean-build-src" depends="init,clean-build-src" if="collection.building.enabled">
    <!-- unix:  -->
    <if><bool><available file="${build.src.home}/Makefile"/></bool>
    <exec executable="make" os="${os.unix}" dir="${build.src.home}" failonerror="true">
      <arg value="distclean"/>
    </exec>
    </if>
    <!-- windows: distclean = clean + remove configure products (remove makefiles). But on Windows there is no removing makefiles, so we just call clean -->    
    <exec executable="nmake" dir="${build.src.home}" osfamily="windows" failonerror="true">
      <arg value="/f"/>
      <arg value="win32.mak"/>
      <arg value="clean"/>
      <arg value="GSDLHOME=${gs2build.home}"/>
    </exec>
  </target>
 
  <target name="configure-build-src" depends="init" if="collection.building.enabled"
    description="Configure the build-src component">
    <exec executable="${build.src.home}/configure" os="${os.unix}"
      dir="${build.src.home}" failonerror="true">
      <arg value="--prefix=${gs2build.home}"/>
      <arg line="${gs2.opt.args} ${static.arg} ${cross.configure.args} ${allargs}"/>
    </exec>
  </target>

  <!-- common-src is done separately and needs to be compiled first -->
  <target name="compile-build-src" depends="init" if="collection.building.enabled">
    
    <exec executable="make" dir="${build.src.home}" os="${os.unix}" failonerror="true">
    	<arg line="${ldlpath.arg}"/>
    </exec>
	
    <exec executable="make" dir="${build.src.home}" os="${os.unix}" failonerror="true">
      <arg value="install"/>
    </exec>

    <!-- run the setup script -->
    <!-- <exec executable="${compile.windows.c++.setup}" osfamily="windows" failonerror="true"/>-->
      <!--Above does not work: even though vcvars.bat executes, the env changes it makes don't get saved. Need user to run vcvars.bat first before calling ant--> 
      <exec executable="nmake" dir="${build.src.home}" osfamily="windows" failonerror="true">
        <arg value="/f"/>
        <arg value="win32.mak"/>
	<arg value="GSDLHOME=${gs2build.home}"/>
      </exec>
      <exec executable="nmake" dir="${build.src.home}" osfamily="windows" failonerror="true">
        <arg value="/f"/>
        <arg value="win32.mak"/>
        <arg value="install"/>
	<arg value="GSDLHOME=${gs2build.home}"/>
      </exec>
  </target>
  

  <!-- ======================== TESTING Targets ========================= -->
  
  <target name="test" description="Run the (incomplete) JUnit test suite "
    depends="init">
    <mkdir dir="${basedir}/test"/>
    <junit printsummary="withOutAndErr"
      errorproperty="test.failed"
      failureproperty="test.failed"
      fork="${junit.fork}">
      <formatter type="plain"/>
      <classpath>
        <pathelement location="${build.home}/gsdl3test.jar"/>
        <path refid="compile.classpath"/>
      </classpath>
      <test name="${testcase}" if="testcase"/>
      <batchtest todir="${basedir}/test" unless="testcase">
        <fileset dir="${build.home}" includes="**/*Test.class" />
      </batchtest>
    </junit>
    <echo>
      *********************************************
      Test output can be found in directory 'test'
      *********************************************
    </echo>
  </target>

  <!-- ======================== FLAX Targets ========================= -->
  <target name="prepare-flax" description="check out flax source code from another repository" if="install.flax">
    <echo>checking out flax ...</echo>
    <mkdir dir="${basedir}/src/java/org/flax"/>
    <mkdir dir="${basedir}/src/java/org/greenstone/gsdl3/flax"/>
    <mkdir dir="${basedir}/src/java/org/greenstone/gsdl3/action/flax"/>
    <mkdir dir="${web.home}/WEB-INF/classes/flax"/>
    <mkdir dir="${web.home}/interfaces/flax"/>
    <mkdir dir="${web.home}/sites/flax"/>
    <mkdir dir="${basedir}/flax-resources"/>
    <mkdir dir="${basedir}/flax-lib"/>
    <exec executable="svn"><arg value="checkout"/><arg value="${flax.checkout.path}/src/java/org/flax"/> 
      <arg value="src/java/org/flax"/></exec> 
    <exec executable="svn"><arg value="checkout"/><arg value="${flax.checkout.path}/src/java/org/greenstone/gsdl3/flax"/> 
      <arg value="src/java/org/greenstone/gsdl3/flax"/></exec> 
    <exec executable="svn"><arg value="checkout"/><arg value="${flax.checkout.path}/src/java/org/greenstone/gsdl3/action/flax"/>
      <arg value="src/java/org/greenstone/gsdl3/action/flax"/></exec>
     <exec executable="svn"><arg value="checkout"/><arg value="${flax.checkout.path}/web/WEB-INF/classes/flax"/> 
      <arg value="${web.home}/WEB-INF/classes/flax"/></exec> 
    <exec executable="svn"><arg value="checkout"/><arg value="${flax.checkout.path}/web/interfaces/flax"/> 
      <arg value="${web.home}/interfaces/flax"/></exec> 
    <exec executable="svn"><arg value="checkout"/><arg value="${flax.checkout.path}/web/sites/flax"/> 
      <arg value="${web.home}/sites/flax"/></exec> 
    <exec executable="svn"><arg value="checkout"/><arg value="${flax.checkout.path}/flax-resources"/> 
      <arg value="flax-resources"/></exec> 
    <exec executable="svn"><arg value="checkout"/><arg value="${flax.checkout.path}/lib"/> 
      <arg value="flax-lib"/></exec> 
    <antcall target="flax-copy-del-files" />
  </target>
  
  <target name="flax-copy-del-files" description="copy some flax files into the appropriate greenstone3 directories and delete some unwanted greenstone stuff">
    <copy file="${web.home}/WEB-INF/classes/flax/web.xml" todir="${web.home}/WEB-INF" overwrite="true" />
    <copy todir="${web.home}/WEB-INF/lib">
		    <fileset dir="${basedir}/flax-lib">
		       <include name="*.jar"/>
		    </fileset>	
    </copy>
    <!--<delete dir="${web.home}/sites/gateway"/>
    <delete dir="${web.home}/sites/localsite"/>-->
  </target>

  <target name="update-flax" description="update flax from repository">
    <echo>updating flax ...</echo>
    <exec executable="svn"><arg value="update"/>
      <arg value="src/java/org/flax"/></exec> 
    <exec executable="svn"><arg value="update"/>
      <arg value="src/java/org/greenstone/gsdl3/action/flax"/></exec>
    <exec executable="svn"><arg value="update"/>
      <arg value="src/java/org/greenstone/gsdl3/flax"/></exec> 
    <exec executable="svn"><arg value="update"/>
      <arg value="${web.home}/WEB-INF/classes/flax"/></exec> 
    <exec executable="svn"><arg value="update"/>
      <arg value="${web.home}/interfaces/flax"/></exec> 
    <exec executable="svn"><arg value="update"/>
      <arg value="${web.home}/web/sites/flax"/></exec>
    <exec executable="svn"><arg value="update"/>
      <arg value="flax-resources"/></exec> 
    <exec executable="svn"><arg value="update"/>
      <arg value="flax-lib"/></exec> 
	<antcall target="compile-core" />
  </target>

  <!-- ========================End of FLAX Targets ========================= -->

  <target name="compile-javadocs">
    <javadoc packagenames="org.greenstone.*"
           sourcepath="src/java"
           defaultexcludes="yes"
           destdir="docs/javadoc"
           author="true"
           version="true"
           use="true"
           windowtitle="Greenstone3 API">
    <doctitle><![CDATA[<h1>Greenstone3 API</h1>]]></doctitle>
    </javadoc>
  </target>

<!-- ========== Some distribution targets ======================== -->
  <target name="remove-source">
    <if><bool><isset property="with.gli.and.gems"/></bool>
    <delete includeEmptyDirs="true">
      <fileset dir="." defaultexcludes="false">
        <patternset refid="greenstone3.source.component"/>
     </fileset>
    </delete>
    
    <else>
    <delete includeEmptyDirs="true">
      <fileset dir="." defaultexcludes="false">
        <patternset refid="greenstone3.source.no.gli.component"/>
     </fileset>
    </delete>
    </else>
    </if>
  </target>

  <target name="dist-tidy"
    description="'tidies-up' a greenstone3 installation for distribution."
    unless="${properties.keep.src}">

    <!-- delete unneeded things -->
    <delete dir="${packages.home}/axis"/>
    <delete><fileset dir="${packages.home}" includes="*.zip"/></delete>
    <delete file="README-SVN.txt"/>
    <delete file="build.properties.in"/>

    <!-- delete source files -->
    <antcall target="remove-source"/>

    <!-- create empty directories -->
    <mkdir dir="${web.writablehome}/applet"/>
    <mkdir dir="${web.writablehome}/logs"/>
    <mkdir dir="${web.writablehome}/logs/tmp"/>

	<!-- Lines with ***** are commented out because these files are useful if we want hybrid installations -->
	
    <!-- os specific tidy-ups -->
    <!-- linux, mac -->
    <if><bool><istrue value="${current.os.isunix}"/></bool>
      <!--*****<delete><fileset dir="." includes="*.bat"/></delete>-->
      <if><bool><isset property="with.gli.and.gems"/></bool>
		<!--*****<delete><fileset dir="gli" includes="*.bat"/></delete>-->
      </if>
      <!--*****<delete><fileset dir="gs2build" includes="*.bat"/></delete>-->
      <!--*****<delete><fileset dir="bin/script" includes="*.bat"/></delete>-->
      <delete file="${basedir}/gs2build/win32cfg.h"/>
      <delete file="${basedir}/gs2build/win32.mak"/>
      <delete dir="${basedir}/winutil"/>
      <delete failonerror="false"><fileset dir="${lib.jni}" includes="*.dll"/></delete>

    <!-- windows -->
    <else><if><bool><istrue value="${current.os.iswindows}"/></bool>
      <!--*****<delete><fileset dir="." includes="*.sh,*.bash,*.csh"/></delete>-->
      <if><bool><isset property="with.gli.and.gems"/></bool>
	<!--*****<delete><fileset dir="gli" includes="*.sh,*.bash,*.csh"/></delete>-->
      </if>
      <!--*****<delete><fileset dir="gs2build" includes="*.sh,*.bash,*.csh"/></delete>-->
      <!--*****<delete><fileset dir="bin/script" includes="*.sh,*.bash,*.csh"/></delete>-->
    </if></else></if>

  </target>

  <!-- fix up executable permissions for binary release -->
  <target name="fix-execute-permissions">
    <echo>Setting binaries to executable</echo>
    <chmod perm="775">
      <fileset dir="."><patternset refid="greenstone3.executables"/></fileset>
    </chmod>
  </target>
  
  <!-- fix up executable permissions for source code release -->
  <target name="fix-execute-permissions-source">
    <chmod perm="775">
      <fileset dir="."><patternset refid="greenstone3.source.executables"/></fileset>
    </chmod>
  </target>

  <!-- for macs, set up the .app shortcuts to gsi, gli, client-gli and gems -->
  <target name="gen-mac-shortcuts">    
    <if><bool><istrue value="${current.os.ismac}"/></bool>
      <filter token="gsdl3srchome" value="${basedir}"/>
      <copy file="${basedir}/gs3-server.app/Contents/document.wflow.in" tofile="${basedir}/gs3-server.app/Contents/document.wflow" filtering="true" overwrite="true"/>
      <copy file="${basedir}/gli.app/Contents/document.wflow.in" tofile="${basedir}/gli.app/Contents/document.wflow" filtering="true" overwrite="true"/>
      <copy file="${basedir}/client-gli.app/Contents/document.wflow.in" tofile="${basedir}/client-gli.app/Contents/document.wflow" filtering="true" overwrite="true"/>
      <copy file="${basedir}/gems.app/Contents/document.wflow.in" tofile="${basedir}/gems.app/Contents/document.wflow" filtering="true" overwrite="true"/>
    </if>
  </target>

  <!-- ============= tweaks for making compilation static ========== -->  
  <target name="tweak-makefiles" depends="init" if="compile.static">
    <antcall target="rtftohtml-add-static" />
  </target>
    
  <target name="rtftohtml-add-static" depends="init" if="collection.building.enabled">
    <rsr verbosity="1" file="${gs2build.home}/build-src/packages/rtftohtml/rtftohtml_src/Makefile" pattern="-o rtftohtml(.{2})EXEEXT(.{1})" replacement="-o rtftohtml$1EXEEXT$2 -static" />
  </target>
    
	<target name="run-collection-tests">
		<if><bool><not><available file="${basedir}/ext/testing" type="dir"/></not></bool>
			<fail>The testing extension is not available. This is required to perform the tests. It can be acquired from SVN by running the command "svn co http://svn.greenstone.org/gs3-extensions/testing/trunk/src testing" in the ext directory of your Greenstone 3 installation. </fail>
		</if>
		<for param="testjar">
			<path>
				<fileset dir="${basedir}" includes="web/sites/*/collect/*/tests/tests.jar"/>
			</path>
			<sequential>
				<echo>Testing @{testjar}</echo>
				<java classname="org.junit.runner.JUnitCore" fork="true">
					<arg value="gstests.TestClass"/>
					<jvmarg value="-DSERVERURL=http://${tomcat.server}:${tomcat.port}${app.path}${server.default.servlet} "/>
					<classpath>
						<fileset dir="${basedir}/ext/testing/lib/java">
							<include name="*.jar"/>
						</fileset>
						<files includes="@{testjar}"/>
					</classpath>
				</java>
			</sequential>
		</for>
	</target>
	
	<target name="build-collection-tests">
		<if><bool><not><available file="${basedir}/ext/testing" type="dir"/></not></bool>
			<fail>The testing extension is not available. This is required to perform the tests. It can be acquired from SVN by running the command "svn co http://svn.greenstone.org/gs3-extensions/testing/trunk/src testing" in the ext directory of your Greenstone 3 installation. </fail>
		</if>
		<for param="compiledir">
			<path>
				<dirset dir="${basedir}" includes="web/sites/*/collect/*/tests/src"/>
			</path>
			<sequential>
				<echo>Compiling @{compiledir}</echo>
				<if><bool><not><available file="@{compiledir}/../build" type="dir"/></not></bool>
					<mkdir dir="@{compiledir}/../build"/>
				</if>
				<javac 
					srcdir="@{compiledir}" 
					destdir="@{compiledir}/../build" 
				        includeantruntime="${compile.includeantruntime}"
					debug="${compile.debug}" 
					deprecation="${compile.deprecation}" 
					optimize="${compile.optimize}"
					encoding="${compile.encoding}">
					<classpath>
						<fileset dir="${basedir}/ext/testing/lib/java">
							<include name="*.jar"/>
						</fileset>
					</classpath>
					<include name="gstests/*.java"/>
				</javac>
				<jar destfile="@{compiledir}/../tests.jar">
					<fileset dir="@{compiledir}/../build">
						<include name="gstests/**"/>
					</fileset>
					<manifest>
						<attribute name="Built-By" value="${user.name}" />
					</manifest>
				</jar>
			</sequential>
		</for>
	</target>
</project>
